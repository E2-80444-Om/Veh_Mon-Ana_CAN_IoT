
Tx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d4  080038d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080038dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000200  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007324  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000016f9  00000000  00000000  000273f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000680  00000000  00000000  00028af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004c9  00000000  00000000  00029170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000215ff  00000000  00000000  00029639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007591  00000000  00000000  0004ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf09d  00000000  00000000  000521c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e78  00000000  00000000  00121268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001230e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003858 	.word	0x08003858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003858 	.word	0x08003858

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_GPIO_EXTI_Callback>:
CAN_TxHeaderTypeDef TxHeader;
uint8_t TxData[5];
uint8_t TxMailBox;
uint8_t adcValue = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	Switch_Flag = 1;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_GPIO_EXTI_Callback+0x24>)
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <HAL_GPIO_EXTI_Callback+0x28>)
 8000584:	f002 f82e 	bl	80025e4 <HAL_GPIO_WritePin>
//	HAL_Delay(1000);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
//	Switch_Flag = 0;
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000e8 	.word	0x200000e8
 8000594:	40020c00 	.word	0x40020c00

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b091      	sub	sp, #68	; 0x44
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[64] = "Temperature:\r\n";
 800059e:	4a39      	ldr	r2, [pc, #228]	; (8000684 <main+0xec>)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4614      	mov	r4, r2
 80005a4:	6820      	ldr	r0, [r4, #0]
 80005a6:	6861      	ldr	r1, [r4, #4]
 80005a8:	68a2      	ldr	r2, [r4, #8]
 80005aa:	c307      	stmia	r3!, {r0, r1, r2}
 80005ac:	89a2      	ldrh	r2, [r4, #12]
 80005ae:	7ba1      	ldrb	r1, [r4, #14]
 80005b0:	801a      	strh	r2, [r3, #0]
 80005b2:	460a      	mov	r2, r1
 80005b4:	709a      	strb	r2, [r3, #2]
 80005b6:	f107 030f 	add.w	r3, r7, #15
 80005ba:	2231      	movs	r2, #49	; 0x31
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fcc6 	bl	8002f50 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb7a 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f870 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f97e 	bl	80008cc <MX_GPIO_Init>
  MX_CAN1_Init();
 80005d0:	f000 f928 	bl	8000824 <MX_CAN1_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8d4 	bl	8000780 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <main+0xf0>)
 80005da:	f001 f9e1 	bl	80019a0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005de:	2102      	movs	r1, #2
 80005e0:	4829      	ldr	r0, [pc, #164]	; (8000688 <main+0xf0>)
 80005e2:	f001 fafc 	bl	8001bde <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f000 fbda 	bl	8000da0 <HAL_Delay>
  HAL_Delay(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f000 fbd7 	bl	8000da0 <HAL_Delay>

  TxHeader.DLC=3;
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <main+0xf4>)
 80005f4:	2203      	movs	r2, #3
 80005f6:	611a      	str	r2, [r3, #16]
  TxHeader.RTR=CAN_RTR_DATA;
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0xf4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  TxHeader.IDE=CAN_ID_STD;
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <main+0xf4>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId=0x0;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <main+0xf4>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  TxHeader.StdId=0x0AA;
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <main+0xf4>)
 800060c:	22aa      	movs	r2, #170	; 0xaa
 800060e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime=DISABLE;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <main+0xf4>)
 8000612:	2200      	movs	r2, #0
 8000614:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	  if(Switch_Flag == 1){
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <main+0xf8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d1fb      	bne.n	8000616 <main+0x7e>
	  	  		 HAL_ADC_Start(&hadc1);
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <main+0xfc>)
 8000620:	f000 fc26 	bl	8000e70 <HAL_ADC_Start>
	  	  		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000628:	481a      	ldr	r0, [pc, #104]	; (8000694 <main+0xfc>)
 800062a:	f000 fd26 	bl	800107a <HAL_ADC_PollForConversion>
	  	  		 adcValue = HAL_ADC_GetValue(&hadc1);
 800062e:	4819      	ldr	r0, [pc, #100]	; (8000694 <main+0xfc>)
 8000630:	f000 fdae 	bl	8001190 <HAL_ADC_GetValue>
 8000634:	4603      	mov	r3, r0
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <main+0x100>)
 800063a:	701a      	strb	r2, [r3, #0]
	  	  		 sprintf(str,"%d\r\n",adcValue);
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <main+0x100>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	463b      	mov	r3, r7
 8000644:	4915      	ldr	r1, [pc, #84]	; (800069c <main+0x104>)
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fc62 	bl	8002f10 <siprintf>
	  	  		 TxData[0] = str;
 800064c:	463b      	mov	r3, r7
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <main+0x108>)
 8000652:	701a      	strb	r2, [r3, #0]
	  	  		 //HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
	  	  	     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <main+0x10c>)
 800065c:	f001 ffc2 	bl	80025e4 <HAL_GPIO_WritePin>
	  	  	     HAL_Delay(1000);
 8000660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000664:	f000 fb9c 	bl	8000da0 <HAL_Delay>
	  	  	     HAL_ADC_Stop(&hadc1);
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <main+0xfc>)
 800066a:	f000 fcd3 	bl	8001014 <HAL_ADC_Stop>
	  	  		    //TxData[1] = adcValue & 0xFF;
	  	  		 HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <main+0x110>)
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <main+0x108>)
 8000672:	4906      	ldr	r1, [pc, #24]	; (800068c <main+0xf4>)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <main+0xf0>)
 8000676:	f001 f9d7 	bl	8001a28 <HAL_CAN_AddTxMessage>
	  	  		 HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067e:	f000 fb8f 	bl	8000da0 <HAL_Delay>
	  	  	  if(Switch_Flag == 1){
 8000682:	e7c8      	b.n	8000616 <main+0x7e>
 8000684:	08003878 	.word	0x08003878
 8000688:	200000c0 	.word	0x200000c0
 800068c:	200000ec 	.word	0x200000ec
 8000690:	200000e8 	.word	0x200000e8
 8000694:	20000078 	.word	0x20000078
 8000698:	2000010a 	.word	0x2000010a
 800069c:	08003870 	.word	0x08003870
 80006a0:	20000104 	.word	0x20000104
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	20000109 	.word	0x20000109

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fc48 	bl	8002f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000720:	2348      	movs	r3, #72	; 0x48
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000728:	2307      	movs	r3, #7
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f001 ff89 	bl	8002648 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800073c:	f000 f94e 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f002 f9ea 	bl	8002b38 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076a:	f000 f937 	bl	80009dc <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	; 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_ADC1_Init+0x98>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_ADC1_Init+0x9c>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_ADC1_Init+0x98>)
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_ADC1_Init+0xa0>)
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_ADC1_Init+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x98>)
 80007da:	2201      	movs	r2, #1
 80007dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_ADC1_Init+0x98>)
 80007e0:	f000 fb02 	bl	8000de8 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f8f7 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_ADC1_Init+0x98>)
 8000800:	f000 fcd4 	bl	80011ac <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800080a:	f000 f8e7 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000078 	.word	0x20000078
 800081c:	40012000 	.word	0x40012000
 8000820:	0f000001 	.word	0x0f000001

08000824 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_CAN1_Init+0xa0>)
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_CAN1_Init+0xa4>)
 800082e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000832:	2212      	movs	r2, #18
 8000834:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_CAN1_Init+0xa0>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000844:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000848:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_CAN1_Init+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000852:	2200      	movs	r2, #0
 8000854:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000858:	2200      	movs	r2, #0
 800085a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_CAN1_Init+0xa0>)
 800085e:	2200      	movs	r2, #0
 8000860:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000864:	2200      	movs	r2, #0
 8000866:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_CAN1_Init+0xa0>)
 800086a:	2200      	movs	r2, #0
 800086c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000870:	2200      	movs	r2, #0
 8000872:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <MX_CAN1_Init+0xa0>)
 8000876:	f000 feb7 	bl	80015e8 <HAL_CAN_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f8ac 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
   canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000884:	2301      	movs	r3, #1
 8000886:	623b      	str	r3, [r7, #32]
   canFilterConfig.SlaveStartFilterBank=14;
 8000888:	230e      	movs	r3, #14
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
   canFilterConfig.FilterBank=2;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
   canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
   canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
   canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
   canFilterConfig.FilterMaskIdLow=0x0000;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
   canFilterConfig.FilterMaskIdHigh=0xFF00;
 80008a0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80008a4:	60bb      	str	r3, [r7, #8]
   canFilterConfig.FilterIdLow=0x0000;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
   canFilterConfig.FilterIdHigh=0x1500;
 80008aa:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80008ae:	603b      	str	r3, [r7, #0]
   HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <MX_CAN1_Init+0xa0>)
 80008b6:	f000 ff93 	bl	80017e0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000c0 	.word	0x200000c0
 80008c8:	40006400 	.word	0x40006400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a31      	ldr	r2, [pc, #196]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_GPIO_Init+0xe4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_GPIO_Init+0xe4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_GPIO_Init+0xe8>)
 800095a:	f001 fe43 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_GPIO_Init+0xec>)
 8000974:	f001 fc9a 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000978:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <MX_GPIO_Init+0xe8>)
 8000992:	f001 fc8b 	bl	80022ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2006      	movs	r0, #6
 800099c:	f001 fc4f 	bl	800223e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 fc68 	bl	8002276 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020000 	.word	0x40020000

080009bc <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80009cc:	f001 fe0a 	bl	80025e4 <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40020c00 	.word	0x40020c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f001 fbfe 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x7c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d127      	bne.n	8000aaa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a92:	2302      	movs	r3, #2
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_ADC_MspInit+0x84>)
 8000aa6:	f001 fc01 	bl	80022ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_CAN_MspInit+0x94>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d134      	bne.n	8000b4c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_CAN_MspInit+0x98>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <HAL_CAN_MspInit+0x98>)
 8000aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_CAN_MspInit+0x98>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_CAN_MspInit+0x98>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <HAL_CAN_MspInit+0x98>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_CAN_MspInit+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b2c:	2309      	movs	r3, #9
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <HAL_CAN_MspInit+0x9c>)
 8000b38:	f001 fbb8 	bl	80022ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2014      	movs	r0, #20
 8000b42:	f001 fb7c 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b46:	2014      	movs	r0, #20
 8000b48:	f001 fb95 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40006400 	.word	0x40006400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f8d8 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f001 fd2d 	bl	8002618 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <CAN1_RX0_IRQHandler+0x10>)
 8000bca:	f001 f82e 	bl	8001c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000c0 	.word	0x200000c0

08000bd8 <_sbrk>:
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
 8000c08:	f002 f9aa 	bl	8002f60 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000010c 	.word	0x2000010c
 8000c40:	20000260 	.word	0x20000260

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x12>
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopFillZerobss+0x16>)
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1a>)
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <LoopFillZerobss+0x1e>)
 8000c72:	2300      	movs	r3, #0
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:
 8000c76:	58d4      	ldr	r4, [r2, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:
 8000c7c:	18c4      	adds	r4, r0, r3
 8000c7e:	428c      	cmp	r4, r1
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x22>)
 8000c84:	4c0b      	ldr	r4, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x26>)
 8000c86:	2300      	movs	r3, #0
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:
 8000c8e:	42a2      	cmp	r2, r4
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>
 8000c92:	f7ff ffd7 	bl	8000c44 <SystemInit>
 8000c96:	f002 f969 	bl	8002f6c <__libc_init_array>
 8000c9a:	f7ff fc7d 	bl	8000598 <main>
 8000c9e:	4770      	bx	lr
 8000ca0:	20020000 	.word	0x20020000
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	2000005c 	.word	0x2000005c
 8000cac:	080038dc 	.word	0x080038dc
 8000cb0:	2000005c 	.word	0x2000005c
 8000cb4:	2000025c 	.word	0x2000025c

08000cb8 <ADC_IRQHandler>:
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f001 fa9f 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe7a 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fab7 	bl	8002292 <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f001 fa7f 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000110 	.word	0x20000110

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000110 	.word	0x20000110

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e033      	b.n	8000e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fe16 	bl	8000a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d118      	bne.n	8000e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e2e:	f023 0302 	bic.w	r3, r3, #2
 8000e32:	f043 0202 	orr.w	r2, r3, #2
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fad8 	bl	80013f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
 8000e56:	e001      	b.n	8000e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Start+0x1a>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e0b2      	b.n	8000ff0 <HAL_ADC_Start+0x180>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d018      	beq.n	8000ed2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb0:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <HAL_ADC_Start+0x18c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a52      	ldr	r2, [pc, #328]	; (8001000 <HAL_ADC_Start+0x190>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0c9a      	lsrs	r2, r3, #18
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ec4:	e002      	b.n	8000ecc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f9      	bne.n	8000ec6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d17a      	bne.n	8000fd6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f1e:	d106      	bne.n	8000f2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	f023 0206 	bic.w	r2, r3, #6
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f2c:	e002      	b.n	8000f34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <HAL_ADC_Start+0x194>)
 8000f3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d12a      	bne.n	8000fac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <HAL_ADC_Start+0x198>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d015      	beq.n	8000f8c <HAL_ADC_Start+0x11c>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a29      	ldr	r2, [pc, #164]	; (800100c <HAL_ADC_Start+0x19c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d105      	bne.n	8000f76 <HAL_ADC_Start+0x106>
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_ADC_Start+0x194>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00a      	beq.n	8000f8c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <HAL_ADC_Start+0x1a0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d136      	bne.n	8000fee <HAL_ADC_Start+0x17e>
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_ADC_Start+0x194>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d130      	bne.n	8000fee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d129      	bne.n	8000fee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	e020      	b.n	8000fee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a15      	ldr	r2, [pc, #84]	; (8001008 <HAL_ADC_Start+0x198>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11b      	bne.n	8000fee <HAL_ADC_Start+0x17e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d114      	bne.n	8000fee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	e00b      	b.n	8000fee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f043 0210 	orr.w	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	20000000 	.word	0x20000000
 8001000:	431bde83 	.word	0x431bde83
 8001004:	40012300 	.word	0x40012300
 8001008:	40012000 	.word	0x40012000
 800100c:	40012100 	.word	0x40012100
 8001010:	40012200 	.word	0x40012200

08001014 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_ADC_Stop+0x16>
 8001026:	2302      	movs	r3, #2
 8001028:	e021      	b.n	800106e <HAL_ADC_Stop+0x5a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001096:	d113      	bne.n	80010c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a6:	d10b      	bne.n	80010c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f043 0220 	orr.w	r2, r3, #32
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e063      	b.n	8001188 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010c0:	f7ff fe62 	bl	8000d88 <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010c6:	e021      	b.n	800110c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ce:	d01d      	beq.n	800110c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x6c>
 80010d6:	f7ff fe57 	bl	8000d88 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d212      	bcs.n	800110c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d00b      	beq.n	800110c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f043 0204 	orr.w	r2, r3, #4
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e03d      	b.n	8001188 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d1d6      	bne.n	80010c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f06f 0212 	mvn.w	r2, #18
 8001122:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d123      	bne.n	8001186 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001142:	2b00      	cmp	r3, #0
 8001144:	d11f      	bne.n	8001186 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800115e:	2b00      	cmp	r3, #0
 8001160:	d111      	bne.n	8001186 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e105      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x228>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d925      	bls.n	8001224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	3b1e      	subs	r3, #30
 80011ee:	2207      	movs	r2, #7
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68d9      	ldr	r1, [r3, #12]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	4603      	mov	r3, r0
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4403      	add	r3, r0
 8001216:	3b1e      	subs	r3, #30
 8001218:	409a      	lsls	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	e022      	b.n	800126a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	2207      	movs	r2, #7
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	4603      	mov	r3, r0
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4403      	add	r3, r0
 8001260:	409a      	lsls	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b06      	cmp	r3, #6
 8001270:	d824      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b05      	subs	r3, #5
 8001284:	221f      	movs	r2, #31
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	400a      	ands	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b05      	subs	r3, #5
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	e04c      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d824      	bhi.n	800130e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b23      	subs	r3, #35	; 0x23
 80012d6:	221f      	movs	r2, #31
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43da      	mvns	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	400a      	ands	r2, r1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b23      	subs	r3, #35	; 0x23
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
 800130c:	e023      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b41      	subs	r3, #65	; 0x41
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b41      	subs	r3, #65	; 0x41
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_ADC_ConfigChannel+0x234>)
 8001358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_ADC_ConfigChannel+0x238>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d109      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1cc>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d105      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_ADC_ConfigChannel+0x238>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d123      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b10      	cmp	r3, #16
 8001388:	d003      	beq.n	8001392 <HAL_ADC_ConfigChannel+0x1e6>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b11      	cmp	r3, #17
 8001390:	d11b      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b10      	cmp	r3, #16
 80013a4:	d111      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_ADC_ConfigChannel+0x23c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_ADC_ConfigChannel+0x240>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9a      	lsrs	r2, r3, #18
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013bc:	e002      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f9      	bne.n	80013be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40012300 	.word	0x40012300
 80013e4:	40012000 	.word	0x40012000
 80013e8:	20000000 	.word	0x20000000
 80013ec:	431bde83 	.word	0x431bde83

080013f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f8:	4b79      	ldr	r3, [pc, #484]	; (80015e0 <ADC_Init+0x1f0>)
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	431a      	orrs	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	021a      	lsls	r2, r3, #8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6899      	ldr	r1, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <ADC_Init+0x1f4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d022      	beq.n	80014ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6899      	ldr	r1, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e00f      	b.n	80014ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0202 	bic.w	r2, r2, #2
 80014fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6899      	ldr	r1, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7e1b      	ldrb	r3, [r3, #24]
 8001508:	005a      	lsls	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01b      	beq.n	8001554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800152a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800153a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6859      	ldr	r1, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	3b01      	subs	r3, #1
 8001548:	035a      	lsls	r2, r3, #13
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	e007      	b.n	8001564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	3b01      	subs	r3, #1
 8001580:	051a      	lsls	r2, r3, #20
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015a6:	025a      	lsls	r2, r3, #9
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6899      	ldr	r1, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	029a      	lsls	r2, r3, #10
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	609a      	str	r2, [r3, #8]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40012300 	.word	0x40012300
 80015e4:	0f000001 	.word	0x0f000001

080015e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0ed      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fa5a 	bl	8000ac0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7ff fbb4 	bl	8000d88 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001622:	e012      	b.n	800164a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001624:	f7ff fbb0 	bl	8000d88 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d90b      	bls.n	800164a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0c5      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0e5      	beq.n	8001624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0202 	bic.w	r2, r2, #2
 8001666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff fb8e 	bl	8000d88 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166e:	e012      	b.n	8001696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001670:	f7ff fb8a 	bl	8000d88 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d90b      	bls.n	8001696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2205      	movs	r2, #5
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e09f      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e5      	bne.n	8001670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e5b      	ldrb	r3, [r3, #25]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e9b      	ldrb	r3, [r3, #26]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0220 	bic.w	r2, r2, #32
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7edb      	ldrb	r3, [r3, #27]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0210 	bic.w	r2, r2, #16
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0210 	orr.w	r2, r2, #16
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7f1b      	ldrb	r3, [r3, #28]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0208 	orr.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0208 	bic.w	r2, r2, #8
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7f5b      	ldrb	r3, [r3, #29]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0204 	orr.w	r2, r2, #4
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	ea42 0103 	orr.w	r1, r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_ConfigFilter+0x26>
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	2b02      	cmp	r3, #2
 8001802:	f040 80be 	bne.w	8001982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_CAN_ConfigFilter+0x1bc>)
 8001808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2201      	movs	r2, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	401a      	ands	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d123      	bne.n	80018b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800188a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3248      	adds	r2, #72	; 0x48
 8001890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	3348      	adds	r3, #72	; 0x48
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d122      	bne.n	80018fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3248      	adds	r2, #72	; 0x48
 80018de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f4:	6979      	ldr	r1, [r7, #20]
 80018f6:	3348      	adds	r3, #72	; 0x48
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001918:	e007      	b.n	800192a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001944:	e007      	b.n	8001956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	431a      	orrs	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	431a      	orrs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001974:	f023 0201 	bic.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e006      	b.n	8001990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40006400 	.word	0x40006400

080019a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d12e      	bne.n	8001a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f9dc 	bl	8000d88 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d2:	e012      	b.n	80019fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d4:	f7ff f9d8 	bl	8000d88 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d90b      	bls.n	80019fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2205      	movs	r2, #5
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e012      	b.n	8001a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e5      	bne.n	80019d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e006      	b.n	8001a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d003      	beq.n	8001a54 <HAL_CAN_AddTxMessage+0x2c>
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	f040 80b8 	bne.w	8001bc4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80a0 	beq.w	8001bb4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	0e1b      	lsrs	r3, r3, #24
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d907      	bls.n	8001a94 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e09e      	b.n	8001bd2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a94:	2201      	movs	r2, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	6809      	ldr	r1, [r1, #0]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3318      	adds	r3, #24
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	440b      	add	r3, r1
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e00f      	b.n	8001ae2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001acc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ad6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3318      	adds	r3, #24
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	440b      	add	r3, r1
 8001ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3318      	adds	r3, #24
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	3304      	adds	r3, #4
 8001af4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	7d1b      	ldrb	r3, [r3, #20]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d111      	bne.n	8001b22 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3318      	adds	r3, #24
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3318      	adds	r3, #24
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3304      	adds	r3, #4
 8001b20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3307      	adds	r3, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	061a      	lsls	r2, r3, #24
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3306      	adds	r3, #6
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3305      	adds	r3, #5
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	3204      	adds	r2, #4
 8001b42:	7812      	ldrb	r2, [r2, #0]
 8001b44:	4610      	mov	r0, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	6811      	ldr	r1, [r2, #0]
 8001b4a:	ea43 0200 	orr.w	r2, r3, r0
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3303      	adds	r3, #3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3302      	adds	r3, #2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4313      	orrs	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	6811      	ldr	r1, [r2, #0]
 8001b80:	ea43 0200 	orr.w	r2, r3, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	440b      	add	r3, r1
 8001b8a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3318      	adds	r3, #24
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4413      	add	r3, r2
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	6811      	ldr	r1, [r2, #0]
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3318      	adds	r3, #24
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	440b      	add	r3, r1
 8001bae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e00e      	b.n	8001bd2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e006      	b.n	8001bd2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d002      	beq.n	8001bfc <HAL_CAN_ActivateNotification+0x1e>
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d109      	bne.n	8001c10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6959      	ldr	r1, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e006      	b.n	8001c1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b08a      	sub	sp, #40	; 0x28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d07c      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d023      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7fe fe95 	bl	80009bc <HAL_CAN_TxMailbox0CompleteCallback>
 8001c92:	e016      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	e00c      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e002      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f97f 	bl	8001fc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d024      	beq.n	8001d16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f959 	bl	8001f98 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ce6:	e016      	b.n	8001d16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e00c      	b.n	8001d16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d004      	beq.n	8001d10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	e002      	b.n	8001d16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f95f 	bl	8001fd4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d024      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f939 	bl	8001fac <HAL_CAN_TxMailbox2CompleteCallback>
 8001d3a:	e016      	b.n	8001d6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	e00c      	b.n	8001d6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e002      	b.n	8001d6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f93f 	bl	8001fe8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2208      	movs	r2, #8
 8001da8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f930 	bl	8002010 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f917 	bl	8001ffc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f912 	bl	8002038 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8f9 	bl	8002024 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8fc 	bl	800204c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8f5 	bl	8002060 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d07b      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d072      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d043      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03e      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ef8:	2b60      	cmp	r3, #96	; 0x60
 8001efa:	d02b      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x32a>
 8001efc:	2b60      	cmp	r3, #96	; 0x60
 8001efe:	d82e      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f00:	2b50      	cmp	r3, #80	; 0x50
 8001f02:	d022      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x320>
 8001f04:	2b50      	cmp	r3, #80	; 0x50
 8001f06:	d82a      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	d019      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x316>
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d826      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f10:	2b30      	cmp	r3, #48	; 0x30
 8001f12:	d010      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x30c>
 8001f14:	2b30      	cmp	r3, #48	; 0x30
 8001f16:	d822      	bhi.n	8001f5e <HAL_CAN_IRQHandler+0x334>
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d002      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x2f8>
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d005      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f20:	e01d      	b.n	8001f5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f2a:	e019      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f34:	e014      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f3e:	e00f      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f48:	e00a      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f52:	e005      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f5c:	e000      	b.n	8001f60 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2204      	movs	r2, #4
 8001f76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f872 	bl	8002074 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff3e 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff31 	bl	80020ec <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e16b      	b.n	80025a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 815a 	bne.w	800259a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d005      	beq.n	80022fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d130      	bne.n	8002360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 0201 	and.w	r2, r3, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b03      	cmp	r3, #3
 800236a:	d017      	beq.n	800239c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d123      	bne.n	80023f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80b4 	beq.w	800259a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a5f      	ldr	r2, [pc, #380]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_GPIO_Init+0x30c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800244e:	4a5b      	ldr	r2, [pc, #364]	; (80025bc <HAL_GPIO_Init+0x310>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_GPIO_Init+0x314>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_GPIO_Init+0x226>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a51      	ldr	r2, [pc, #324]	; (80025c4 <HAL_GPIO_Init+0x318>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x222>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a50      	ldr	r2, [pc, #320]	; (80025c8 <HAL_GPIO_Init+0x31c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x21e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_GPIO_Init+0x320>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_GPIO_Init+0x324>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x328>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x32c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_GPIO_Init+0x330>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x20a>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00e      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024b6:	2308      	movs	r3, #8
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x228>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x310>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x334>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_GPIO_Init+0x334>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_GPIO_Init+0x334>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002594:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_GPIO_Init+0x334>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae90 	bls.w	80022c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40021400 	.word	0x40021400
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40013c00 	.word	0x40013c00

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	619a      	str	r2, [r3, #24]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff98 	bl	800056c <HAL_GPIO_EXTI_Callback>
  }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e267      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d075      	beq.n	8002752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00c      	beq.n	800268c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	2b08      	cmp	r3, #8
 800267c:	d112      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268a:	d10b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d05b      	beq.n	8002750 <HAL_RCC_OscConfig+0x108>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d157      	bne.n	8002750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e242      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x74>
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b70      	ldr	r3, [pc, #448]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6f      	ldr	r2, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xb0>
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe fb42 	bl	8000d88 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe fb3e 	bl	8000d88 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e207      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xc0>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fb2e 	bl	8000d88 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fb2a 	bl	8000d88 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1f3      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0xe8>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b44      	ldr	r3, [pc, #272]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1c7      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fae3 	bl	8000d88 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe fadf 	bl	8000d88 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1a8      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4925      	ldr	r1, [pc, #148]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x244>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fac2 	bl	8000d88 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe fabe 	bl	8000d88 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e187      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d036      	beq.n	80028a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe faa2 	bl	8000d88 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fa9e 	bl	8000d88 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e167      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_OscConfig+0x240>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x200>
 8002866:	e01b      	b.n	80028a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x248>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe fa8b 	bl	8000d88 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fa87 	bl	8000d88 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e150      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ea      	bne.n	8002876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b7a      	ldr	r3, [pc, #488]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b77      	ldr	r3, [pc, #476]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b74      	ldr	r3, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a73      	ldr	r2, [pc, #460]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe fa47 	bl	8000d88 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe fa43 	bl	8000d88 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e10c      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x474>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x2ea>
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x30c>
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a5b      	ldr	r2, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x324>
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fa08 	bl	8000d88 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fa04 	bl	8000d88 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0cb      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCC_OscConfig+0x334>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe f9f2 	bl	8000d88 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe f9ee 	bl	8000d88 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0b5      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a1 	beq.w	8002b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d05c      	beq.n	8002aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d141      	bne.n	8002a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe f9c2 	bl	8000d88 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe f9be 	bl	8000d88 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e087      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe f997 	bl	8000d88 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe f993 	bl	8000d88 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e05c      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x416>
 8002a7c:	e054      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x478>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe f980 	bl	8000d88 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe f97c 	bl	8000d88 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e045      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
 8002aaa:	e03d      	b.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e038      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x4ec>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d028      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d121      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11a      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d90c      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d044      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d119      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e067      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fe f8ae 	bl	8000d88 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe f8aa 	bl	8000d88 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e04f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20c      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f80e 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08003888 	.word	0x08003888
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d08:	b094      	sub	sp, #80	; 0x50
 8002d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d14:	2300      	movs	r3, #0
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1c:	4b79      	ldr	r3, [pc, #484]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d00d      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	f200 80e1 	bhi.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x34>
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d003      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d36:	e0db      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d3c:	e0db      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d42:	e0d8      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d44:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4e:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	2200      	movs	r2, #0
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
 8002d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d76:	4622      	mov	r2, r4
 8002d78:	462b      	mov	r3, r5
 8002d7a:	f04f 0000 	mov.w	r0, #0
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	0159      	lsls	r1, r3, #5
 8002d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d88:	0150      	lsls	r0, r2, #5
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4621      	mov	r1, r4
 8002d90:	1a51      	subs	r1, r2, r1
 8002d92:	6139      	str	r1, [r7, #16]
 8002d94:	4629      	mov	r1, r5
 8002d96:	eb63 0301 	sbc.w	r3, r3, r1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da8:	4659      	mov	r1, fp
 8002daa:	018b      	lsls	r3, r1, #6
 8002dac:	4651      	mov	r1, sl
 8002dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002db2:	4651      	mov	r1, sl
 8002db4:	018a      	lsls	r2, r1, #6
 8002db6:	4651      	mov	r1, sl
 8002db8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	4699      	mov	r9, r3
 8002dda:	4623      	mov	r3, r4
 8002ddc:	eb18 0303 	adds.w	r3, r8, r3
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	462b      	mov	r3, r5
 8002de4:	eb49 0303 	adc.w	r3, r9, r3
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002df6:	4629      	mov	r1, r5
 8002df8:	024b      	lsls	r3, r1, #9
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e00:	4621      	mov	r1, r4
 8002e02:	024a      	lsls	r2, r1, #9
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e14:	f7fd fa2c 	bl	8000270 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e20:	e058      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0159      	lsls	r1, r3, #5
 8002e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4e:	0150      	lsls	r0, r2, #5
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4641      	mov	r1, r8
 8002e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e74:	ebb2 040a 	subs.w	r4, r2, sl
 8002e78:	eb63 050b 	sbc.w	r5, r3, fp
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	00eb      	lsls	r3, r5, #3
 8002e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8a:	00e2      	lsls	r2, r4, #3
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4643      	mov	r3, r8
 8002e92:	18e3      	adds	r3, r4, r3
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	464b      	mov	r3, r9
 8002e98:	eb45 0303 	adc.w	r3, r5, r3
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	61fa      	str	r2, [r7, #28]
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	f7fd f9d2 	bl	8000270 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3750      	adds	r7, #80	; 0x50
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200

08002f10 <siprintf>:
 8002f10:	b40e      	push	{r1, r2, r3}
 8002f12:	b500      	push	{lr}
 8002f14:	b09c      	sub	sp, #112	; 0x70
 8002f16:	ab1d      	add	r3, sp, #116	; 0x74
 8002f18:	9002      	str	r0, [sp, #8]
 8002f1a:	9006      	str	r0, [sp, #24]
 8002f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f20:	4809      	ldr	r0, [pc, #36]	; (8002f48 <siprintf+0x38>)
 8002f22:	9107      	str	r1, [sp, #28]
 8002f24:	9104      	str	r1, [sp, #16]
 8002f26:	4909      	ldr	r1, [pc, #36]	; (8002f4c <siprintf+0x3c>)
 8002f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f2c:	9105      	str	r1, [sp, #20]
 8002f2e:	6800      	ldr	r0, [r0, #0]
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	a902      	add	r1, sp, #8
 8002f34:	f000 f992 	bl	800325c <_svfiprintf_r>
 8002f38:	9b02      	ldr	r3, [sp, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	b01c      	add	sp, #112	; 0x70
 8002f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f44:	b003      	add	sp, #12
 8002f46:	4770      	bx	lr
 8002f48:	20000058 	.word	0x20000058
 8002f4c:	ffff0208 	.word	0xffff0208

08002f50 <memset>:
 8002f50:	4402      	add	r2, r0
 8002f52:	4603      	mov	r3, r0
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d100      	bne.n	8002f5a <memset+0xa>
 8002f58:	4770      	bx	lr
 8002f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5e:	e7f9      	b.n	8002f54 <memset+0x4>

08002f60 <__errno>:
 8002f60:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <__errno+0x8>)
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000058 	.word	0x20000058

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	4d0d      	ldr	r5, [pc, #52]	; (8002fa4 <__libc_init_array+0x38>)
 8002f70:	4c0d      	ldr	r4, [pc, #52]	; (8002fa8 <__libc_init_array+0x3c>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	2600      	movs	r6, #0
 8002f78:	42a6      	cmp	r6, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	4d0b      	ldr	r5, [pc, #44]	; (8002fac <__libc_init_array+0x40>)
 8002f7e:	4c0c      	ldr	r4, [pc, #48]	; (8002fb0 <__libc_init_array+0x44>)
 8002f80:	f000 fc6a 	bl	8003858 <_init>
 8002f84:	1b64      	subs	r4, r4, r5
 8002f86:	10a4      	asrs	r4, r4, #2
 8002f88:	2600      	movs	r6, #0
 8002f8a:	42a6      	cmp	r6, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f94:	4798      	blx	r3
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9e:	4798      	blx	r3
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	080038d4 	.word	0x080038d4
 8002fa8:	080038d4 	.word	0x080038d4
 8002fac:	080038d4 	.word	0x080038d4
 8002fb0:	080038d8 	.word	0x080038d8

08002fb4 <__retarget_lock_acquire_recursive>:
 8002fb4:	4770      	bx	lr

08002fb6 <__retarget_lock_release_recursive>:
 8002fb6:	4770      	bx	lr

08002fb8 <_free_r>:
 8002fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	d044      	beq.n	8003048 <_free_r+0x90>
 8002fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc2:	9001      	str	r0, [sp, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fca:	bfb8      	it	lt
 8002fcc:	18e4      	addlt	r4, r4, r3
 8002fce:	f000 f8df 	bl	8003190 <__malloc_lock>
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <_free_r+0x94>)
 8002fd4:	9801      	ldr	r0, [sp, #4]
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	b933      	cbnz	r3, 8002fe8 <_free_r+0x30>
 8002fda:	6063      	str	r3, [r4, #4]
 8002fdc:	6014      	str	r4, [r2, #0]
 8002fde:	b003      	add	sp, #12
 8002fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fe4:	f000 b8da 	b.w	800319c <__malloc_unlock>
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	d908      	bls.n	8002ffe <_free_r+0x46>
 8002fec:	6825      	ldr	r5, [r4, #0]
 8002fee:	1961      	adds	r1, r4, r5
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	bf01      	itttt	eq
 8002ff4:	6819      	ldreq	r1, [r3, #0]
 8002ff6:	685b      	ldreq	r3, [r3, #4]
 8002ff8:	1949      	addeq	r1, r1, r5
 8002ffa:	6021      	streq	r1, [r4, #0]
 8002ffc:	e7ed      	b.n	8002fda <_free_r+0x22>
 8002ffe:	461a      	mov	r2, r3
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	b10b      	cbz	r3, 8003008 <_free_r+0x50>
 8003004:	42a3      	cmp	r3, r4
 8003006:	d9fa      	bls.n	8002ffe <_free_r+0x46>
 8003008:	6811      	ldr	r1, [r2, #0]
 800300a:	1855      	adds	r5, r2, r1
 800300c:	42a5      	cmp	r5, r4
 800300e:	d10b      	bne.n	8003028 <_free_r+0x70>
 8003010:	6824      	ldr	r4, [r4, #0]
 8003012:	4421      	add	r1, r4
 8003014:	1854      	adds	r4, r2, r1
 8003016:	42a3      	cmp	r3, r4
 8003018:	6011      	str	r1, [r2, #0]
 800301a:	d1e0      	bne.n	8002fde <_free_r+0x26>
 800301c:	681c      	ldr	r4, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	6053      	str	r3, [r2, #4]
 8003022:	440c      	add	r4, r1
 8003024:	6014      	str	r4, [r2, #0]
 8003026:	e7da      	b.n	8002fde <_free_r+0x26>
 8003028:	d902      	bls.n	8003030 <_free_r+0x78>
 800302a:	230c      	movs	r3, #12
 800302c:	6003      	str	r3, [r0, #0]
 800302e:	e7d6      	b.n	8002fde <_free_r+0x26>
 8003030:	6825      	ldr	r5, [r4, #0]
 8003032:	1961      	adds	r1, r4, r5
 8003034:	428b      	cmp	r3, r1
 8003036:	bf04      	itt	eq
 8003038:	6819      	ldreq	r1, [r3, #0]
 800303a:	685b      	ldreq	r3, [r3, #4]
 800303c:	6063      	str	r3, [r4, #4]
 800303e:	bf04      	itt	eq
 8003040:	1949      	addeq	r1, r1, r5
 8003042:	6021      	streq	r1, [r4, #0]
 8003044:	6054      	str	r4, [r2, #4]
 8003046:	e7ca      	b.n	8002fde <_free_r+0x26>
 8003048:	b003      	add	sp, #12
 800304a:	bd30      	pop	{r4, r5, pc}
 800304c:	20000254 	.word	0x20000254

08003050 <sbrk_aligned>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0e      	ldr	r6, [pc, #56]	; (800308c <sbrk_aligned+0x3c>)
 8003054:	460c      	mov	r4, r1
 8003056:	6831      	ldr	r1, [r6, #0]
 8003058:	4605      	mov	r5, r0
 800305a:	b911      	cbnz	r1, 8003062 <sbrk_aligned+0x12>
 800305c:	f000 fba6 	bl	80037ac <_sbrk_r>
 8003060:	6030      	str	r0, [r6, #0]
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f000 fba1 	bl	80037ac <_sbrk_r>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d00a      	beq.n	8003084 <sbrk_aligned+0x34>
 800306e:	1cc4      	adds	r4, r0, #3
 8003070:	f024 0403 	bic.w	r4, r4, #3
 8003074:	42a0      	cmp	r0, r4
 8003076:	d007      	beq.n	8003088 <sbrk_aligned+0x38>
 8003078:	1a21      	subs	r1, r4, r0
 800307a:	4628      	mov	r0, r5
 800307c:	f000 fb96 	bl	80037ac <_sbrk_r>
 8003080:	3001      	adds	r0, #1
 8003082:	d101      	bne.n	8003088 <sbrk_aligned+0x38>
 8003084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003088:	4620      	mov	r0, r4
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	20000258 	.word	0x20000258

08003090 <_malloc_r>:
 8003090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003094:	1ccd      	adds	r5, r1, #3
 8003096:	f025 0503 	bic.w	r5, r5, #3
 800309a:	3508      	adds	r5, #8
 800309c:	2d0c      	cmp	r5, #12
 800309e:	bf38      	it	cc
 80030a0:	250c      	movcc	r5, #12
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	4607      	mov	r7, r0
 80030a6:	db01      	blt.n	80030ac <_malloc_r+0x1c>
 80030a8:	42a9      	cmp	r1, r5
 80030aa:	d905      	bls.n	80030b8 <_malloc_r+0x28>
 80030ac:	230c      	movs	r3, #12
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	2600      	movs	r6, #0
 80030b2:	4630      	mov	r0, r6
 80030b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800318c <_malloc_r+0xfc>
 80030bc:	f000 f868 	bl	8003190 <__malloc_lock>
 80030c0:	f8d8 3000 	ldr.w	r3, [r8]
 80030c4:	461c      	mov	r4, r3
 80030c6:	bb5c      	cbnz	r4, 8003120 <_malloc_r+0x90>
 80030c8:	4629      	mov	r1, r5
 80030ca:	4638      	mov	r0, r7
 80030cc:	f7ff ffc0 	bl	8003050 <sbrk_aligned>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	4604      	mov	r4, r0
 80030d4:	d155      	bne.n	8003182 <_malloc_r+0xf2>
 80030d6:	f8d8 4000 	ldr.w	r4, [r8]
 80030da:	4626      	mov	r6, r4
 80030dc:	2e00      	cmp	r6, #0
 80030de:	d145      	bne.n	800316c <_malloc_r+0xdc>
 80030e0:	2c00      	cmp	r4, #0
 80030e2:	d048      	beq.n	8003176 <_malloc_r+0xe6>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	4631      	mov	r1, r6
 80030e8:	4638      	mov	r0, r7
 80030ea:	eb04 0903 	add.w	r9, r4, r3
 80030ee:	f000 fb5d 	bl	80037ac <_sbrk_r>
 80030f2:	4581      	cmp	r9, r0
 80030f4:	d13f      	bne.n	8003176 <_malloc_r+0xe6>
 80030f6:	6821      	ldr	r1, [r4, #0]
 80030f8:	1a6d      	subs	r5, r5, r1
 80030fa:	4629      	mov	r1, r5
 80030fc:	4638      	mov	r0, r7
 80030fe:	f7ff ffa7 	bl	8003050 <sbrk_aligned>
 8003102:	3001      	adds	r0, #1
 8003104:	d037      	beq.n	8003176 <_malloc_r+0xe6>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	442b      	add	r3, r5
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	f8d8 3000 	ldr.w	r3, [r8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d038      	beq.n	8003186 <_malloc_r+0xf6>
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	42a2      	cmp	r2, r4
 8003118:	d12b      	bne.n	8003172 <_malloc_r+0xe2>
 800311a:	2200      	movs	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e00f      	b.n	8003140 <_malloc_r+0xb0>
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	1b52      	subs	r2, r2, r5
 8003124:	d41f      	bmi.n	8003166 <_malloc_r+0xd6>
 8003126:	2a0b      	cmp	r2, #11
 8003128:	d917      	bls.n	800315a <_malloc_r+0xca>
 800312a:	1961      	adds	r1, r4, r5
 800312c:	42a3      	cmp	r3, r4
 800312e:	6025      	str	r5, [r4, #0]
 8003130:	bf18      	it	ne
 8003132:	6059      	strne	r1, [r3, #4]
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	bf08      	it	eq
 8003138:	f8c8 1000 	streq.w	r1, [r8]
 800313c:	5162      	str	r2, [r4, r5]
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	4638      	mov	r0, r7
 8003142:	f104 060b 	add.w	r6, r4, #11
 8003146:	f000 f829 	bl	800319c <__malloc_unlock>
 800314a:	f026 0607 	bic.w	r6, r6, #7
 800314e:	1d23      	adds	r3, r4, #4
 8003150:	1af2      	subs	r2, r6, r3
 8003152:	d0ae      	beq.n	80030b2 <_malloc_r+0x22>
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	50a3      	str	r3, [r4, r2]
 8003158:	e7ab      	b.n	80030b2 <_malloc_r+0x22>
 800315a:	42a3      	cmp	r3, r4
 800315c:	6862      	ldr	r2, [r4, #4]
 800315e:	d1dd      	bne.n	800311c <_malloc_r+0x8c>
 8003160:	f8c8 2000 	str.w	r2, [r8]
 8003164:	e7ec      	b.n	8003140 <_malloc_r+0xb0>
 8003166:	4623      	mov	r3, r4
 8003168:	6864      	ldr	r4, [r4, #4]
 800316a:	e7ac      	b.n	80030c6 <_malloc_r+0x36>
 800316c:	4634      	mov	r4, r6
 800316e:	6876      	ldr	r6, [r6, #4]
 8003170:	e7b4      	b.n	80030dc <_malloc_r+0x4c>
 8003172:	4613      	mov	r3, r2
 8003174:	e7cc      	b.n	8003110 <_malloc_r+0x80>
 8003176:	230c      	movs	r3, #12
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4638      	mov	r0, r7
 800317c:	f000 f80e 	bl	800319c <__malloc_unlock>
 8003180:	e797      	b.n	80030b2 <_malloc_r+0x22>
 8003182:	6025      	str	r5, [r4, #0]
 8003184:	e7dc      	b.n	8003140 <_malloc_r+0xb0>
 8003186:	605b      	str	r3, [r3, #4]
 8003188:	deff      	udf	#255	; 0xff
 800318a:	bf00      	nop
 800318c:	20000254 	.word	0x20000254

08003190 <__malloc_lock>:
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <__malloc_lock+0x8>)
 8003192:	f7ff bf0f 	b.w	8002fb4 <__retarget_lock_acquire_recursive>
 8003196:	bf00      	nop
 8003198:	20000250 	.word	0x20000250

0800319c <__malloc_unlock>:
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <__malloc_unlock+0x8>)
 800319e:	f7ff bf0a 	b.w	8002fb6 <__retarget_lock_release_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000250 	.word	0x20000250

080031a8 <__ssputs_r>:
 80031a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	688e      	ldr	r6, [r1, #8]
 80031ae:	461f      	mov	r7, r3
 80031b0:	42be      	cmp	r6, r7
 80031b2:	680b      	ldr	r3, [r1, #0]
 80031b4:	4682      	mov	sl, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	4690      	mov	r8, r2
 80031ba:	d82c      	bhi.n	8003216 <__ssputs_r+0x6e>
 80031bc:	898a      	ldrh	r2, [r1, #12]
 80031be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031c2:	d026      	beq.n	8003212 <__ssputs_r+0x6a>
 80031c4:	6965      	ldr	r5, [r4, #20]
 80031c6:	6909      	ldr	r1, [r1, #16]
 80031c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031cc:	eba3 0901 	sub.w	r9, r3, r1
 80031d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031d4:	1c7b      	adds	r3, r7, #1
 80031d6:	444b      	add	r3, r9
 80031d8:	106d      	asrs	r5, r5, #1
 80031da:	429d      	cmp	r5, r3
 80031dc:	bf38      	it	cc
 80031de:	461d      	movcc	r5, r3
 80031e0:	0553      	lsls	r3, r2, #21
 80031e2:	d527      	bpl.n	8003234 <__ssputs_r+0x8c>
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7ff ff53 	bl	8003090 <_malloc_r>
 80031ea:	4606      	mov	r6, r0
 80031ec:	b360      	cbz	r0, 8003248 <__ssputs_r+0xa0>
 80031ee:	6921      	ldr	r1, [r4, #16]
 80031f0:	464a      	mov	r2, r9
 80031f2:	f000 faeb 	bl	80037cc <memcpy>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	6126      	str	r6, [r4, #16]
 8003204:	6165      	str	r5, [r4, #20]
 8003206:	444e      	add	r6, r9
 8003208:	eba5 0509 	sub.w	r5, r5, r9
 800320c:	6026      	str	r6, [r4, #0]
 800320e:	60a5      	str	r5, [r4, #8]
 8003210:	463e      	mov	r6, r7
 8003212:	42be      	cmp	r6, r7
 8003214:	d900      	bls.n	8003218 <__ssputs_r+0x70>
 8003216:	463e      	mov	r6, r7
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	4632      	mov	r2, r6
 800321c:	4641      	mov	r1, r8
 800321e:	f000 faab 	bl	8003778 <memmove>
 8003222:	68a3      	ldr	r3, [r4, #8]
 8003224:	1b9b      	subs	r3, r3, r6
 8003226:	60a3      	str	r3, [r4, #8]
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	4433      	add	r3, r6
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	2000      	movs	r0, #0
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	462a      	mov	r2, r5
 8003236:	f000 fad7 	bl	80037e8 <_realloc_r>
 800323a:	4606      	mov	r6, r0
 800323c:	2800      	cmp	r0, #0
 800323e:	d1e0      	bne.n	8003202 <__ssputs_r+0x5a>
 8003240:	6921      	ldr	r1, [r4, #16]
 8003242:	4650      	mov	r0, sl
 8003244:	f7ff feb8 	bl	8002fb8 <_free_r>
 8003248:	230c      	movs	r3, #12
 800324a:	f8ca 3000 	str.w	r3, [sl]
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800325a:	e7e9      	b.n	8003230 <__ssputs_r+0x88>

0800325c <_svfiprintf_r>:
 800325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003260:	4698      	mov	r8, r3
 8003262:	898b      	ldrh	r3, [r1, #12]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	b09d      	sub	sp, #116	; 0x74
 8003268:	4607      	mov	r7, r0
 800326a:	460d      	mov	r5, r1
 800326c:	4614      	mov	r4, r2
 800326e:	d50e      	bpl.n	800328e <_svfiprintf_r+0x32>
 8003270:	690b      	ldr	r3, [r1, #16]
 8003272:	b963      	cbnz	r3, 800328e <_svfiprintf_r+0x32>
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	f7ff ff0b 	bl	8003090 <_malloc_r>
 800327a:	6028      	str	r0, [r5, #0]
 800327c:	6128      	str	r0, [r5, #16]
 800327e:	b920      	cbnz	r0, 800328a <_svfiprintf_r+0x2e>
 8003280:	230c      	movs	r3, #12
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003288:	e0d0      	b.n	800342c <_svfiprintf_r+0x1d0>
 800328a:	2340      	movs	r3, #64	; 0x40
 800328c:	616b      	str	r3, [r5, #20]
 800328e:	2300      	movs	r3, #0
 8003290:	9309      	str	r3, [sp, #36]	; 0x24
 8003292:	2320      	movs	r3, #32
 8003294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003298:	f8cd 800c 	str.w	r8, [sp, #12]
 800329c:	2330      	movs	r3, #48	; 0x30
 800329e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003444 <_svfiprintf_r+0x1e8>
 80032a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032a6:	f04f 0901 	mov.w	r9, #1
 80032aa:	4623      	mov	r3, r4
 80032ac:	469a      	mov	sl, r3
 80032ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032b2:	b10a      	cbz	r2, 80032b8 <_svfiprintf_r+0x5c>
 80032b4:	2a25      	cmp	r2, #37	; 0x25
 80032b6:	d1f9      	bne.n	80032ac <_svfiprintf_r+0x50>
 80032b8:	ebba 0b04 	subs.w	fp, sl, r4
 80032bc:	d00b      	beq.n	80032d6 <_svfiprintf_r+0x7a>
 80032be:	465b      	mov	r3, fp
 80032c0:	4622      	mov	r2, r4
 80032c2:	4629      	mov	r1, r5
 80032c4:	4638      	mov	r0, r7
 80032c6:	f7ff ff6f 	bl	80031a8 <__ssputs_r>
 80032ca:	3001      	adds	r0, #1
 80032cc:	f000 80a9 	beq.w	8003422 <_svfiprintf_r+0x1c6>
 80032d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032d2:	445a      	add	r2, fp
 80032d4:	9209      	str	r2, [sp, #36]	; 0x24
 80032d6:	f89a 3000 	ldrb.w	r3, [sl]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a1 	beq.w	8003422 <_svfiprintf_r+0x1c6>
 80032e0:	2300      	movs	r3, #0
 80032e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ea:	f10a 0a01 	add.w	sl, sl, #1
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	9307      	str	r3, [sp, #28]
 80032f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032f6:	931a      	str	r3, [sp, #104]	; 0x68
 80032f8:	4654      	mov	r4, sl
 80032fa:	2205      	movs	r2, #5
 80032fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003300:	4850      	ldr	r0, [pc, #320]	; (8003444 <_svfiprintf_r+0x1e8>)
 8003302:	f7fc ff65 	bl	80001d0 <memchr>
 8003306:	9a04      	ldr	r2, [sp, #16]
 8003308:	b9d8      	cbnz	r0, 8003342 <_svfiprintf_r+0xe6>
 800330a:	06d0      	lsls	r0, r2, #27
 800330c:	bf44      	itt	mi
 800330e:	2320      	movmi	r3, #32
 8003310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003314:	0711      	lsls	r1, r2, #28
 8003316:	bf44      	itt	mi
 8003318:	232b      	movmi	r3, #43	; 0x2b
 800331a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800331e:	f89a 3000 	ldrb.w	r3, [sl]
 8003322:	2b2a      	cmp	r3, #42	; 0x2a
 8003324:	d015      	beq.n	8003352 <_svfiprintf_r+0xf6>
 8003326:	9a07      	ldr	r2, [sp, #28]
 8003328:	4654      	mov	r4, sl
 800332a:	2000      	movs	r0, #0
 800332c:	f04f 0c0a 	mov.w	ip, #10
 8003330:	4621      	mov	r1, r4
 8003332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003336:	3b30      	subs	r3, #48	; 0x30
 8003338:	2b09      	cmp	r3, #9
 800333a:	d94d      	bls.n	80033d8 <_svfiprintf_r+0x17c>
 800333c:	b1b0      	cbz	r0, 800336c <_svfiprintf_r+0x110>
 800333e:	9207      	str	r2, [sp, #28]
 8003340:	e014      	b.n	800336c <_svfiprintf_r+0x110>
 8003342:	eba0 0308 	sub.w	r3, r0, r8
 8003346:	fa09 f303 	lsl.w	r3, r9, r3
 800334a:	4313      	orrs	r3, r2
 800334c:	9304      	str	r3, [sp, #16]
 800334e:	46a2      	mov	sl, r4
 8003350:	e7d2      	b.n	80032f8 <_svfiprintf_r+0x9c>
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	1d19      	adds	r1, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9103      	str	r1, [sp, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfbb      	ittet	lt
 800335e:	425b      	neglt	r3, r3
 8003360:	f042 0202 	orrlt.w	r2, r2, #2
 8003364:	9307      	strge	r3, [sp, #28]
 8003366:	9307      	strlt	r3, [sp, #28]
 8003368:	bfb8      	it	lt
 800336a:	9204      	strlt	r2, [sp, #16]
 800336c:	7823      	ldrb	r3, [r4, #0]
 800336e:	2b2e      	cmp	r3, #46	; 0x2e
 8003370:	d10c      	bne.n	800338c <_svfiprintf_r+0x130>
 8003372:	7863      	ldrb	r3, [r4, #1]
 8003374:	2b2a      	cmp	r3, #42	; 0x2a
 8003376:	d134      	bne.n	80033e2 <_svfiprintf_r+0x186>
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	9203      	str	r2, [sp, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	bfb8      	it	lt
 8003384:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003388:	3402      	adds	r4, #2
 800338a:	9305      	str	r3, [sp, #20]
 800338c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003454 <_svfiprintf_r+0x1f8>
 8003390:	7821      	ldrb	r1, [r4, #0]
 8003392:	2203      	movs	r2, #3
 8003394:	4650      	mov	r0, sl
 8003396:	f7fc ff1b 	bl	80001d0 <memchr>
 800339a:	b138      	cbz	r0, 80033ac <_svfiprintf_r+0x150>
 800339c:	9b04      	ldr	r3, [sp, #16]
 800339e:	eba0 000a 	sub.w	r0, r0, sl
 80033a2:	2240      	movs	r2, #64	; 0x40
 80033a4:	4082      	lsls	r2, r0
 80033a6:	4313      	orrs	r3, r2
 80033a8:	3401      	adds	r4, #1
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b0:	4825      	ldr	r0, [pc, #148]	; (8003448 <_svfiprintf_r+0x1ec>)
 80033b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b6:	2206      	movs	r2, #6
 80033b8:	f7fc ff0a 	bl	80001d0 <memchr>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d038      	beq.n	8003432 <_svfiprintf_r+0x1d6>
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <_svfiprintf_r+0x1f0>)
 80033c2:	bb1b      	cbnz	r3, 800340c <_svfiprintf_r+0x1b0>
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	3307      	adds	r3, #7
 80033c8:	f023 0307 	bic.w	r3, r3, #7
 80033cc:	3308      	adds	r3, #8
 80033ce:	9303      	str	r3, [sp, #12]
 80033d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d2:	4433      	add	r3, r6
 80033d4:	9309      	str	r3, [sp, #36]	; 0x24
 80033d6:	e768      	b.n	80032aa <_svfiprintf_r+0x4e>
 80033d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033dc:	460c      	mov	r4, r1
 80033de:	2001      	movs	r0, #1
 80033e0:	e7a6      	b.n	8003330 <_svfiprintf_r+0xd4>
 80033e2:	2300      	movs	r3, #0
 80033e4:	3401      	adds	r4, #1
 80033e6:	9305      	str	r3, [sp, #20]
 80033e8:	4619      	mov	r1, r3
 80033ea:	f04f 0c0a 	mov.w	ip, #10
 80033ee:	4620      	mov	r0, r4
 80033f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f4:	3a30      	subs	r2, #48	; 0x30
 80033f6:	2a09      	cmp	r2, #9
 80033f8:	d903      	bls.n	8003402 <_svfiprintf_r+0x1a6>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0c6      	beq.n	800338c <_svfiprintf_r+0x130>
 80033fe:	9105      	str	r1, [sp, #20]
 8003400:	e7c4      	b.n	800338c <_svfiprintf_r+0x130>
 8003402:	fb0c 2101 	mla	r1, ip, r1, r2
 8003406:	4604      	mov	r4, r0
 8003408:	2301      	movs	r3, #1
 800340a:	e7f0      	b.n	80033ee <_svfiprintf_r+0x192>
 800340c:	ab03      	add	r3, sp, #12
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	462a      	mov	r2, r5
 8003412:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <_svfiprintf_r+0x1f4>)
 8003414:	a904      	add	r1, sp, #16
 8003416:	4638      	mov	r0, r7
 8003418:	f3af 8000 	nop.w
 800341c:	1c42      	adds	r2, r0, #1
 800341e:	4606      	mov	r6, r0
 8003420:	d1d6      	bne.n	80033d0 <_svfiprintf_r+0x174>
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	065b      	lsls	r3, r3, #25
 8003426:	f53f af2d 	bmi.w	8003284 <_svfiprintf_r+0x28>
 800342a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800342c:	b01d      	add	sp, #116	; 0x74
 800342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003432:	ab03      	add	r3, sp, #12
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	462a      	mov	r2, r5
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <_svfiprintf_r+0x1f4>)
 800343a:	a904      	add	r1, sp, #16
 800343c:	4638      	mov	r0, r7
 800343e:	f000 f879 	bl	8003534 <_printf_i>
 8003442:	e7eb      	b.n	800341c <_svfiprintf_r+0x1c0>
 8003444:	08003898 	.word	0x08003898
 8003448:	080038a2 	.word	0x080038a2
 800344c:	00000000 	.word	0x00000000
 8003450:	080031a9 	.word	0x080031a9
 8003454:	0800389e 	.word	0x0800389e

08003458 <_printf_common>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	4616      	mov	r6, r2
 800345e:	4699      	mov	r9, r3
 8003460:	688a      	ldr	r2, [r1, #8]
 8003462:	690b      	ldr	r3, [r1, #16]
 8003464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003468:	4293      	cmp	r3, r2
 800346a:	bfb8      	it	lt
 800346c:	4613      	movlt	r3, r2
 800346e:	6033      	str	r3, [r6, #0]
 8003470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003474:	4607      	mov	r7, r0
 8003476:	460c      	mov	r4, r1
 8003478:	b10a      	cbz	r2, 800347e <_printf_common+0x26>
 800347a:	3301      	adds	r3, #1
 800347c:	6033      	str	r3, [r6, #0]
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	0699      	lsls	r1, r3, #26
 8003482:	bf42      	ittt	mi
 8003484:	6833      	ldrmi	r3, [r6, #0]
 8003486:	3302      	addmi	r3, #2
 8003488:	6033      	strmi	r3, [r6, #0]
 800348a:	6825      	ldr	r5, [r4, #0]
 800348c:	f015 0506 	ands.w	r5, r5, #6
 8003490:	d106      	bne.n	80034a0 <_printf_common+0x48>
 8003492:	f104 0a19 	add.w	sl, r4, #25
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	6832      	ldr	r2, [r6, #0]
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	42ab      	cmp	r3, r5
 800349e:	dc26      	bgt.n	80034ee <_printf_common+0x96>
 80034a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034a4:	1e13      	subs	r3, r2, #0
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	bf18      	it	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	0692      	lsls	r2, r2, #26
 80034ae:	d42b      	bmi.n	8003508 <_printf_common+0xb0>
 80034b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b4:	4649      	mov	r1, r9
 80034b6:	4638      	mov	r0, r7
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d01e      	beq.n	80034fc <_printf_common+0xa4>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	6922      	ldr	r2, [r4, #16]
 80034c2:	f003 0306 	and.w	r3, r3, #6
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf02      	ittt	eq
 80034ca:	68e5      	ldreq	r5, [r4, #12]
 80034cc:	6833      	ldreq	r3, [r6, #0]
 80034ce:	1aed      	subeq	r5, r5, r3
 80034d0:	68a3      	ldr	r3, [r4, #8]
 80034d2:	bf0c      	ite	eq
 80034d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034d8:	2500      	movne	r5, #0
 80034da:	4293      	cmp	r3, r2
 80034dc:	bfc4      	itt	gt
 80034de:	1a9b      	subgt	r3, r3, r2
 80034e0:	18ed      	addgt	r5, r5, r3
 80034e2:	2600      	movs	r6, #0
 80034e4:	341a      	adds	r4, #26
 80034e6:	42b5      	cmp	r5, r6
 80034e8:	d11a      	bne.n	8003520 <_printf_common+0xc8>
 80034ea:	2000      	movs	r0, #0
 80034ec:	e008      	b.n	8003500 <_printf_common+0xa8>
 80034ee:	2301      	movs	r3, #1
 80034f0:	4652      	mov	r2, sl
 80034f2:	4649      	mov	r1, r9
 80034f4:	4638      	mov	r0, r7
 80034f6:	47c0      	blx	r8
 80034f8:	3001      	adds	r0, #1
 80034fa:	d103      	bne.n	8003504 <_printf_common+0xac>
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003504:	3501      	adds	r5, #1
 8003506:	e7c6      	b.n	8003496 <_printf_common+0x3e>
 8003508:	18e1      	adds	r1, r4, r3
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	2030      	movs	r0, #48	; 0x30
 800350e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003512:	4422      	add	r2, r4
 8003514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800351c:	3302      	adds	r3, #2
 800351e:	e7c7      	b.n	80034b0 <_printf_common+0x58>
 8003520:	2301      	movs	r3, #1
 8003522:	4622      	mov	r2, r4
 8003524:	4649      	mov	r1, r9
 8003526:	4638      	mov	r0, r7
 8003528:	47c0      	blx	r8
 800352a:	3001      	adds	r0, #1
 800352c:	d0e6      	beq.n	80034fc <_printf_common+0xa4>
 800352e:	3601      	adds	r6, #1
 8003530:	e7d9      	b.n	80034e6 <_printf_common+0x8e>
	...

08003534 <_printf_i>:
 8003534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	7e0f      	ldrb	r7, [r1, #24]
 800353a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800353c:	2f78      	cmp	r7, #120	; 0x78
 800353e:	4691      	mov	r9, r2
 8003540:	4680      	mov	r8, r0
 8003542:	460c      	mov	r4, r1
 8003544:	469a      	mov	sl, r3
 8003546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800354a:	d807      	bhi.n	800355c <_printf_i+0x28>
 800354c:	2f62      	cmp	r7, #98	; 0x62
 800354e:	d80a      	bhi.n	8003566 <_printf_i+0x32>
 8003550:	2f00      	cmp	r7, #0
 8003552:	f000 80d4 	beq.w	80036fe <_printf_i+0x1ca>
 8003556:	2f58      	cmp	r7, #88	; 0x58
 8003558:	f000 80c0 	beq.w	80036dc <_printf_i+0x1a8>
 800355c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003564:	e03a      	b.n	80035dc <_printf_i+0xa8>
 8003566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800356a:	2b15      	cmp	r3, #21
 800356c:	d8f6      	bhi.n	800355c <_printf_i+0x28>
 800356e:	a101      	add	r1, pc, #4	; (adr r1, 8003574 <_printf_i+0x40>)
 8003570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003574:	080035cd 	.word	0x080035cd
 8003578:	080035e1 	.word	0x080035e1
 800357c:	0800355d 	.word	0x0800355d
 8003580:	0800355d 	.word	0x0800355d
 8003584:	0800355d 	.word	0x0800355d
 8003588:	0800355d 	.word	0x0800355d
 800358c:	080035e1 	.word	0x080035e1
 8003590:	0800355d 	.word	0x0800355d
 8003594:	0800355d 	.word	0x0800355d
 8003598:	0800355d 	.word	0x0800355d
 800359c:	0800355d 	.word	0x0800355d
 80035a0:	080036e5 	.word	0x080036e5
 80035a4:	0800360d 	.word	0x0800360d
 80035a8:	0800369f 	.word	0x0800369f
 80035ac:	0800355d 	.word	0x0800355d
 80035b0:	0800355d 	.word	0x0800355d
 80035b4:	08003707 	.word	0x08003707
 80035b8:	0800355d 	.word	0x0800355d
 80035bc:	0800360d 	.word	0x0800360d
 80035c0:	0800355d 	.word	0x0800355d
 80035c4:	0800355d 	.word	0x0800355d
 80035c8:	080036a7 	.word	0x080036a7
 80035cc:	682b      	ldr	r3, [r5, #0]
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	602a      	str	r2, [r5, #0]
 80035d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035dc:	2301      	movs	r3, #1
 80035de:	e09f      	b.n	8003720 <_printf_i+0x1ec>
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	682b      	ldr	r3, [r5, #0]
 80035e4:	0607      	lsls	r7, r0, #24
 80035e6:	f103 0104 	add.w	r1, r3, #4
 80035ea:	6029      	str	r1, [r5, #0]
 80035ec:	d501      	bpl.n	80035f2 <_printf_i+0xbe>
 80035ee:	681e      	ldr	r6, [r3, #0]
 80035f0:	e003      	b.n	80035fa <_printf_i+0xc6>
 80035f2:	0646      	lsls	r6, r0, #25
 80035f4:	d5fb      	bpl.n	80035ee <_printf_i+0xba>
 80035f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035fa:	2e00      	cmp	r6, #0
 80035fc:	da03      	bge.n	8003606 <_printf_i+0xd2>
 80035fe:	232d      	movs	r3, #45	; 0x2d
 8003600:	4276      	negs	r6, r6
 8003602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003606:	485a      	ldr	r0, [pc, #360]	; (8003770 <_printf_i+0x23c>)
 8003608:	230a      	movs	r3, #10
 800360a:	e012      	b.n	8003632 <_printf_i+0xfe>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1d19      	adds	r1, r3, #4
 8003612:	6029      	str	r1, [r5, #0]
 8003614:	0605      	lsls	r5, r0, #24
 8003616:	d501      	bpl.n	800361c <_printf_i+0xe8>
 8003618:	681e      	ldr	r6, [r3, #0]
 800361a:	e002      	b.n	8003622 <_printf_i+0xee>
 800361c:	0641      	lsls	r1, r0, #25
 800361e:	d5fb      	bpl.n	8003618 <_printf_i+0xe4>
 8003620:	881e      	ldrh	r6, [r3, #0]
 8003622:	4853      	ldr	r0, [pc, #332]	; (8003770 <_printf_i+0x23c>)
 8003624:	2f6f      	cmp	r7, #111	; 0x6f
 8003626:	bf0c      	ite	eq
 8003628:	2308      	moveq	r3, #8
 800362a:	230a      	movne	r3, #10
 800362c:	2100      	movs	r1, #0
 800362e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003632:	6865      	ldr	r5, [r4, #4]
 8003634:	60a5      	str	r5, [r4, #8]
 8003636:	2d00      	cmp	r5, #0
 8003638:	bfa2      	ittt	ge
 800363a:	6821      	ldrge	r1, [r4, #0]
 800363c:	f021 0104 	bicge.w	r1, r1, #4
 8003640:	6021      	strge	r1, [r4, #0]
 8003642:	b90e      	cbnz	r6, 8003648 <_printf_i+0x114>
 8003644:	2d00      	cmp	r5, #0
 8003646:	d04b      	beq.n	80036e0 <_printf_i+0x1ac>
 8003648:	4615      	mov	r5, r2
 800364a:	fbb6 f1f3 	udiv	r1, r6, r3
 800364e:	fb03 6711 	mls	r7, r3, r1, r6
 8003652:	5dc7      	ldrb	r7, [r0, r7]
 8003654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003658:	4637      	mov	r7, r6
 800365a:	42bb      	cmp	r3, r7
 800365c:	460e      	mov	r6, r1
 800365e:	d9f4      	bls.n	800364a <_printf_i+0x116>
 8003660:	2b08      	cmp	r3, #8
 8003662:	d10b      	bne.n	800367c <_printf_i+0x148>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	07de      	lsls	r6, r3, #31
 8003668:	d508      	bpl.n	800367c <_printf_i+0x148>
 800366a:	6923      	ldr	r3, [r4, #16]
 800366c:	6861      	ldr	r1, [r4, #4]
 800366e:	4299      	cmp	r1, r3
 8003670:	bfde      	ittt	le
 8003672:	2330      	movle	r3, #48	; 0x30
 8003674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003678:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800367c:	1b52      	subs	r2, r2, r5
 800367e:	6122      	str	r2, [r4, #16]
 8003680:	f8cd a000 	str.w	sl, [sp]
 8003684:	464b      	mov	r3, r9
 8003686:	aa03      	add	r2, sp, #12
 8003688:	4621      	mov	r1, r4
 800368a:	4640      	mov	r0, r8
 800368c:	f7ff fee4 	bl	8003458 <_printf_common>
 8003690:	3001      	adds	r0, #1
 8003692:	d14a      	bne.n	800372a <_printf_i+0x1f6>
 8003694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003698:	b004      	add	sp, #16
 800369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	4833      	ldr	r0, [pc, #204]	; (8003774 <_printf_i+0x240>)
 80036a8:	2778      	movs	r7, #120	; 0x78
 80036aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	6829      	ldr	r1, [r5, #0]
 80036b2:	061f      	lsls	r7, r3, #24
 80036b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80036b8:	d402      	bmi.n	80036c0 <_printf_i+0x18c>
 80036ba:	065f      	lsls	r7, r3, #25
 80036bc:	bf48      	it	mi
 80036be:	b2b6      	uxthmi	r6, r6
 80036c0:	07df      	lsls	r7, r3, #31
 80036c2:	bf48      	it	mi
 80036c4:	f043 0320 	orrmi.w	r3, r3, #32
 80036c8:	6029      	str	r1, [r5, #0]
 80036ca:	bf48      	it	mi
 80036cc:	6023      	strmi	r3, [r4, #0]
 80036ce:	b91e      	cbnz	r6, 80036d8 <_printf_i+0x1a4>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f023 0320 	bic.w	r3, r3, #32
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	2310      	movs	r3, #16
 80036da:	e7a7      	b.n	800362c <_printf_i+0xf8>
 80036dc:	4824      	ldr	r0, [pc, #144]	; (8003770 <_printf_i+0x23c>)
 80036de:	e7e4      	b.n	80036aa <_printf_i+0x176>
 80036e0:	4615      	mov	r5, r2
 80036e2:	e7bd      	b.n	8003660 <_printf_i+0x12c>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	6826      	ldr	r6, [r4, #0]
 80036e8:	6961      	ldr	r1, [r4, #20]
 80036ea:	1d18      	adds	r0, r3, #4
 80036ec:	6028      	str	r0, [r5, #0]
 80036ee:	0635      	lsls	r5, r6, #24
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	d501      	bpl.n	80036f8 <_printf_i+0x1c4>
 80036f4:	6019      	str	r1, [r3, #0]
 80036f6:	e002      	b.n	80036fe <_printf_i+0x1ca>
 80036f8:	0670      	lsls	r0, r6, #25
 80036fa:	d5fb      	bpl.n	80036f4 <_printf_i+0x1c0>
 80036fc:	8019      	strh	r1, [r3, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	6123      	str	r3, [r4, #16]
 8003702:	4615      	mov	r5, r2
 8003704:	e7bc      	b.n	8003680 <_printf_i+0x14c>
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	602a      	str	r2, [r5, #0]
 800370c:	681d      	ldr	r5, [r3, #0]
 800370e:	6862      	ldr	r2, [r4, #4]
 8003710:	2100      	movs	r1, #0
 8003712:	4628      	mov	r0, r5
 8003714:	f7fc fd5c 	bl	80001d0 <memchr>
 8003718:	b108      	cbz	r0, 800371e <_printf_i+0x1ea>
 800371a:	1b40      	subs	r0, r0, r5
 800371c:	6060      	str	r0, [r4, #4]
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	6123      	str	r3, [r4, #16]
 8003722:	2300      	movs	r3, #0
 8003724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003728:	e7aa      	b.n	8003680 <_printf_i+0x14c>
 800372a:	6923      	ldr	r3, [r4, #16]
 800372c:	462a      	mov	r2, r5
 800372e:	4649      	mov	r1, r9
 8003730:	4640      	mov	r0, r8
 8003732:	47d0      	blx	sl
 8003734:	3001      	adds	r0, #1
 8003736:	d0ad      	beq.n	8003694 <_printf_i+0x160>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	079b      	lsls	r3, r3, #30
 800373c:	d413      	bmi.n	8003766 <_printf_i+0x232>
 800373e:	68e0      	ldr	r0, [r4, #12]
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	4298      	cmp	r0, r3
 8003744:	bfb8      	it	lt
 8003746:	4618      	movlt	r0, r3
 8003748:	e7a6      	b.n	8003698 <_printf_i+0x164>
 800374a:	2301      	movs	r3, #1
 800374c:	4632      	mov	r2, r6
 800374e:	4649      	mov	r1, r9
 8003750:	4640      	mov	r0, r8
 8003752:	47d0      	blx	sl
 8003754:	3001      	adds	r0, #1
 8003756:	d09d      	beq.n	8003694 <_printf_i+0x160>
 8003758:	3501      	adds	r5, #1
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	9903      	ldr	r1, [sp, #12]
 800375e:	1a5b      	subs	r3, r3, r1
 8003760:	42ab      	cmp	r3, r5
 8003762:	dcf2      	bgt.n	800374a <_printf_i+0x216>
 8003764:	e7eb      	b.n	800373e <_printf_i+0x20a>
 8003766:	2500      	movs	r5, #0
 8003768:	f104 0619 	add.w	r6, r4, #25
 800376c:	e7f5      	b.n	800375a <_printf_i+0x226>
 800376e:	bf00      	nop
 8003770:	080038a9 	.word	0x080038a9
 8003774:	080038ba 	.word	0x080038ba

08003778 <memmove>:
 8003778:	4288      	cmp	r0, r1
 800377a:	b510      	push	{r4, lr}
 800377c:	eb01 0402 	add.w	r4, r1, r2
 8003780:	d902      	bls.n	8003788 <memmove+0x10>
 8003782:	4284      	cmp	r4, r0
 8003784:	4623      	mov	r3, r4
 8003786:	d807      	bhi.n	8003798 <memmove+0x20>
 8003788:	1e43      	subs	r3, r0, #1
 800378a:	42a1      	cmp	r1, r4
 800378c:	d008      	beq.n	80037a0 <memmove+0x28>
 800378e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003796:	e7f8      	b.n	800378a <memmove+0x12>
 8003798:	4402      	add	r2, r0
 800379a:	4601      	mov	r1, r0
 800379c:	428a      	cmp	r2, r1
 800379e:	d100      	bne.n	80037a2 <memmove+0x2a>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037aa:	e7f7      	b.n	800379c <memmove+0x24>

080037ac <_sbrk_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4d06      	ldr	r5, [pc, #24]	; (80037c8 <_sbrk_r+0x1c>)
 80037b0:	2300      	movs	r3, #0
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	f7fd fa0e 	bl	8000bd8 <_sbrk>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d102      	bne.n	80037c6 <_sbrk_r+0x1a>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	b103      	cbz	r3, 80037c6 <_sbrk_r+0x1a>
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	2000024c 	.word	0x2000024c

080037cc <memcpy>:
 80037cc:	440a      	add	r2, r1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80037d4:	d100      	bne.n	80037d8 <memcpy+0xc>
 80037d6:	4770      	bx	lr
 80037d8:	b510      	push	{r4, lr}
 80037da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e2:	4291      	cmp	r1, r2
 80037e4:	d1f9      	bne.n	80037da <memcpy+0xe>
 80037e6:	bd10      	pop	{r4, pc}

080037e8 <_realloc_r>:
 80037e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ec:	4680      	mov	r8, r0
 80037ee:	4614      	mov	r4, r2
 80037f0:	460e      	mov	r6, r1
 80037f2:	b921      	cbnz	r1, 80037fe <_realloc_r+0x16>
 80037f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037f8:	4611      	mov	r1, r2
 80037fa:	f7ff bc49 	b.w	8003090 <_malloc_r>
 80037fe:	b92a      	cbnz	r2, 800380c <_realloc_r+0x24>
 8003800:	f7ff fbda 	bl	8002fb8 <_free_r>
 8003804:	4625      	mov	r5, r4
 8003806:	4628      	mov	r0, r5
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380c:	f000 f81b 	bl	8003846 <_malloc_usable_size_r>
 8003810:	4284      	cmp	r4, r0
 8003812:	4607      	mov	r7, r0
 8003814:	d802      	bhi.n	800381c <_realloc_r+0x34>
 8003816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800381a:	d812      	bhi.n	8003842 <_realloc_r+0x5a>
 800381c:	4621      	mov	r1, r4
 800381e:	4640      	mov	r0, r8
 8003820:	f7ff fc36 	bl	8003090 <_malloc_r>
 8003824:	4605      	mov	r5, r0
 8003826:	2800      	cmp	r0, #0
 8003828:	d0ed      	beq.n	8003806 <_realloc_r+0x1e>
 800382a:	42bc      	cmp	r4, r7
 800382c:	4622      	mov	r2, r4
 800382e:	4631      	mov	r1, r6
 8003830:	bf28      	it	cs
 8003832:	463a      	movcs	r2, r7
 8003834:	f7ff ffca 	bl	80037cc <memcpy>
 8003838:	4631      	mov	r1, r6
 800383a:	4640      	mov	r0, r8
 800383c:	f7ff fbbc 	bl	8002fb8 <_free_r>
 8003840:	e7e1      	b.n	8003806 <_realloc_r+0x1e>
 8003842:	4635      	mov	r5, r6
 8003844:	e7df      	b.n	8003806 <_realloc_r+0x1e>

08003846 <_malloc_usable_size_r>:
 8003846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800384a:	1f18      	subs	r0, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	bfbc      	itt	lt
 8003850:	580b      	ldrlt	r3, [r1, r0]
 8003852:	18c0      	addlt	r0, r0, r3
 8003854:	4770      	bx	lr
	...

08003858 <_init>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr

08003864 <_fini>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr
