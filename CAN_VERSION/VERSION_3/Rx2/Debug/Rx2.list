
Rx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003810  08003810  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000214  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000928b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001774  00000000  00000000  0002935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000788  00000000  00000000  0002aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005be  00000000  00000000  0002b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020613  00000000  00000000  0002b816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008b94  00000000  00000000  0004be29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4cea  00000000  00000000  000549bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002360  00000000  00000000  001196a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0011ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003790 	.word	0x08003790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003790 	.word	0x08003790

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t flag =0;
char str[20];
//char str1[20];


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]


	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000588:	2100      	movs	r1, #0
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800058c:	f000 fdd2 	bl	8001134 <HAL_CAN_GetRxMessage>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000598:	f001 fbe2 	bl	8001d60 <HAL_GPIO_WritePin>
	flag =1;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000100 	.word	0x20000100
 80005b0:	200000e4 	.word	0x200000e4
 80005b4:	20000078 	.word	0x20000078
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	2000010a 	.word	0x2000010a

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 faff 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f849 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f92f 	bl	8000830 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005d2:	f000 f8af 	bl	8000734 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f901 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <main+0x84>)
 80005dc:	f000 fd66 	bl	80010ac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005e0:	2102      	movs	r1, #2
 80005e2:	4818      	ldr	r0, [pc, #96]	; (8000644 <main+0x84>)
 80005e4:	f000 feb8 	bl	8001358 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f000 fb5f 	bl	8000cac <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  		if(flag == 1){
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <main+0x88>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d1fb      	bne.n	80005ee <main+0x2e>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fc:	4813      	ldr	r0, [pc, #76]	; (800064c <main+0x8c>)
 80005fe:	f001 fbaf 	bl	8001d60 <HAL_GPIO_WritePin>
//	  			sprintf(str,"Rain value is %d\r\n",RxData[0]);
//	  			sprintf(str1,"Rain__1 is %d\r\n",RxData[1]);
	  			uint16_t receivedAdcValue = (uint16_t)(( RxData[0]<< 8) | RxData[1] );
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <main+0x90>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	021b      	lsls	r3, r3, #8
 8000608:	b21a      	sxth	r2, r3
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0x90>)
 800060c:	785b      	ldrb	r3, [r3, #1]
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21b      	sxth	r3, r3
 8000614:	80fb      	strh	r3, [r7, #6]
	  			sprintf(str,"Rain value is %d\r\n",receivedAdcValue);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	461a      	mov	r2, r3
 800061a:	490e      	ldr	r1, [pc, #56]	; (8000654 <main+0x94>)
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <main+0x98>)
 800061e:	f002 fc13 	bl	8002e48 <siprintf>
	  			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0x98>)
 8000624:	f7ff fdd4 	bl	80001d0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000630:	4909      	ldr	r1, [pc, #36]	; (8000658 <main+0x98>)
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <main+0x9c>)
 8000634:	f002 f893 	bl	800275e <HAL_UART_Transmit>
	  		//	HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), HAL_MAX_DELAY);
	  			HAL_Delay(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f000 fb36 	bl	8000cac <HAL_Delay>
	  		if(flag == 1){
 8000640:	e7d5      	b.n	80005ee <main+0x2e>
 8000642:	bf00      	nop
 8000644:	20000078 	.word	0x20000078
 8000648:	2000010a 	.word	0x2000010a
 800064c:	40020c00 	.word	0x40020c00
 8000650:	20000100 	.word	0x20000100
 8000654:	080037a8 	.word	0x080037a8
 8000658:	2000010c 	.word	0x2000010c
 800065c:	200000a0 	.word	0x200000a0

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fc0a 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d4:	2348      	movs	r3, #72	; 0x48
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006dc:	2307      	movs	r3, #7
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fb55 	bl	8001d94 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f8fe 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fdb6 	bl	8002284 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f8e7 	bl	80008f0 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <MX_CAN1_Init+0xa0>)
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <MX_CAN1_Init+0xa4>)
 800073e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000742:	2212      	movs	r2, #18
 8000744:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_CAN1_Init+0xa0>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000754:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000758:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_CAN1_Init+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000768:	2200      	movs	r2, #0
 800076a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_CAN1_Init+0xa0>)
 800076e:	2200      	movs	r2, #0
 8000770:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000774:	2200      	movs	r2, #0
 8000776:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_CAN1_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	; (80007d4 <MX_CAN1_Init+0xa0>)
 8000786:	f000 fab5 	bl	8000cf4 <HAL_CAN_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f8ae 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 8000798:	230e      	movs	r3, #14
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterConfig.FilterBank=2;
 800079c:	2302      	movs	r3, #2
 800079e:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 80007b0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80007b4:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 80007ba:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80007be:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <MX_CAN1_Init+0xa0>)
 80007c6:	f000 fb91 	bl	8000eec <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000078 	.word	0x20000078
 80007d8:	40006400 	.word	0x40006400

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 ff56 	bl	80026c4 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f867 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000a0 	.word	0x200000a0
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_GPIO_Init+0xb8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <MX_GPIO_Init+0xb8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_GPIO_Init+0xb8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_GPIO_Init+0xb8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <MX_GPIO_Init+0xb8>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_GPIO_Init+0xb8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <MX_GPIO_Init+0xbc>)
 80008be:	f001 fa4f 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0xbc>)
 80008dc:	f001 f8a4 	bl	8001a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093a:	2007      	movs	r0, #7
 800093c:	f001 f832 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <HAL_CAN_MspInit+0x94>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d134      	bne.n	80009d8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_CAN_MspInit+0x98>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <HAL_CAN_MspInit+0x98>)
 8000978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_CAN_MspInit+0x98>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_CAN_MspInit+0x98>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_CAN_MspInit+0x98>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_CAN_MspInit+0x98>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009b8:	2309      	movs	r3, #9
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <HAL_CAN_MspInit+0x9c>)
 80009c4:	f001 f830 	bl	8001a28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2014      	movs	r0, #20
 80009ce:	f000 fff4 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009d2:	2014      	movs	r0, #20
 80009d4:	f001 f80d 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40006400 	.word	0x40006400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12b      	bne.n	8000a66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_UART_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a56:	2307      	movs	r3, #7
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0x8c>)
 8000a62:	f000 ffe1 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8d0 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <CAN1_RX0_IRQHandler+0x10>)
 8000ad6:	f000 fc65 	bl	80013a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000078 	.word	0x20000078

08000ae4 <_sbrk>:
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
 8000b14:	f002 f9c0 	bl	8002e98 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20020000 	.word	0x20020000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000120 	.word	0x20000120
 8000b4c:	20000270 	.word	0x20000270

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x12>
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1a>)
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1e>)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:
 8000b82:	58d4      	ldr	r4, [r2, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:
 8000b88:	18c4      	adds	r4, r0, r3
 8000b8a:	428c      	cmp	r4, r1
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x22>)
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x26>)
 8000b92:	2300      	movs	r3, #0
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:
 8000b9a:	42a2      	cmp	r2, r4
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
 8000b9e:	f7ff ffd7 	bl	8000b50 <SystemInit>
 8000ba2:	f002 f97f 	bl	8002ea4 <__libc_init_array>
 8000ba6:	f7ff fd0b 	bl	80005c0 <main>
 8000baa:	4770      	bx	lr
 8000bac:	20020000 	.word	0x20020000
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	2000005c 	.word	0x2000005c
 8000bb8:	08003818 	.word	0x08003818
 8000bbc:	2000005c 	.word	0x2000005c
 8000bc0:	20000270 	.word	0x20000270

08000bc4 <ADC_IRQHandler>:
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_Init+0x40>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_Init+0x40>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x40>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 fed7 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe7e 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 feef 	bl	8001a0e <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	f000 feb7 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000124 	.word	0x20000124

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000124 	.word	0x20000124

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e0ed      	b.n	8000ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fe1a 	bl	800094c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0201 	orr.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d28:	f7ff ffb4 	bl	8000c94 <HAL_GetTick>
 8000d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d2e:	e012      	b.n	8000d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d30:	f7ff ffb0 	bl	8000c94 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d90b      	bls.n	8000d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0c5      	b.n	8000ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0e5      	beq.n	8000d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0202 	bic.w	r2, r2, #2
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d74:	f7ff ff8e 	bl	8000c94 <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d7a:	e012      	b.n	8000da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7c:	f7ff ff8a 	bl	8000c94 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d90b      	bls.n	8000da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e09f      	b.n	8000ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e5      	bne.n	8000d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7e1b      	ldrb	r3, [r3, #24]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7e5b      	ldrb	r3, [r3, #25]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e9b      	ldrb	r3, [r3, #26]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d108      	bne.n	8000e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0220 	orr.w	r2, r2, #32
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e007      	b.n	8000e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0220 	bic.w	r2, r2, #32
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7edb      	ldrb	r3, [r3, #27]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0210 	bic.w	r2, r2, #16
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e007      	b.n	8000e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0210 	orr.w	r2, r2, #16
 8000e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7f1b      	ldrb	r3, [r3, #28]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0208 	orr.w	r2, r2, #8
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e007      	b.n	8000e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0208 	bic.w	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7f5b      	ldrb	r3, [r3, #29]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d108      	bne.n	8000e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 0204 	orr.w	r2, r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e007      	b.n	8000eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0204 	bic.w	r2, r2, #4
 8000eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	ea42 0103 	orr.w	r1, r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f04:	7cfb      	ldrb	r3, [r7, #19]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d003      	beq.n	8000f12 <HAL_CAN_ConfigFilter+0x26>
 8000f0a:	7cfb      	ldrb	r3, [r7, #19]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	f040 80be 	bne.w	800108e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f12:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f14:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2201      	movs	r2, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	401a      	ands	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d123      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3248      	adds	r2, #72	; 0x48
 8000f9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fb2:	6979      	ldr	r1, [r7, #20]
 8000fb4:	3348      	adds	r3, #72	; 0x48
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d122      	bne.n	800100a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fe4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3248      	adds	r2, #72	; 0x48
 8000fea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	3348      	adds	r3, #72	; 0x48
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43db      	mvns	r3, r3
 800101c:	401a      	ands	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001024:	e007      	b.n	8001036 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	431a      	orrs	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001050:	e007      	b.n	8001062 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	431a      	orrs	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	431a      	orrs	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001080:	f023 0201 	bic.w	r2, r3, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e006      	b.n	800109c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40006400 	.word	0x40006400

080010ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d12e      	bne.n	800111e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fddc 	bl	8000c94 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010de:	e012      	b.n	8001106 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e0:	f7ff fdd8 	bl	8000c94 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b0a      	cmp	r3, #10
 80010ec:	d90b      	bls.n	8001106 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2205      	movs	r2, #5
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e012      	b.n	800112c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e5      	bne.n	80010e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e006      	b.n	800112c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
  }
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <HAL_CAN_GetRxMessage+0x24>
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b02      	cmp	r3, #2
 8001154:	f040 80f3 	bne.w	800133e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10e      	bne.n	800117c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d116      	bne.n	800119a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0e7      	b.n	800134c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d107      	bne.n	800119a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0d8      	b.n	800134c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	331b      	adds	r3, #27
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0204 	and.w	r2, r3, #4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10c      	bne.n	80011d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0d5b      	lsrs	r3, r3, #21
 80011c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e00b      	b.n	80011ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	331b      	adds	r3, #27
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	331b      	adds	r3, #27
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0202 	and.w	r2, r3, #2
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	331b      	adds	r3, #27
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 020f 	and.w	r2, r3, #15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	331b      	adds	r3, #27
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	b2da      	uxtb	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	331b      	adds	r3, #27
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0a1a      	lsrs	r2, r3, #8
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3302      	adds	r3, #2
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0e1a      	lsrs	r2, r3, #24
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3303      	adds	r3, #3
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0a1a      	lsrs	r2, r3, #8
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3305      	adds	r3, #5
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0c1a      	lsrs	r2, r3, #16
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3306      	adds	r3, #6
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0e1a      	lsrs	r2, r3, #24
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3307      	adds	r3, #7
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d108      	bne.n	800132a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	e007      	b.n	800133a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e006      	b.n	800134c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001368:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d002      	beq.n	8001376 <HAL_CAN_ActivateNotification+0x1e>
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d109      	bne.n	800138a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6959      	ldr	r1, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e006      	b.n	8001398 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
  }
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d07c      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2201      	movs	r2, #1
 80013fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f983 	bl	8001712 <HAL_CAN_TxMailbox0CompleteCallback>
 800140c:	e016      	b.n	800143c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
 8001420:	e00c      	b.n	800143c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	e002      	b.n	800143c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f989 	bl	800174e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d024      	beq.n	8001490 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f963 	bl	8001726 <HAL_CAN_TxMailbox1CompleteCallback>
 8001460:	e016      	b.n	8001490 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e00c      	b.n	8001490 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e002      	b.n	8001490 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f969 	bl	8001762 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d024      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f943 	bl	800173a <HAL_CAN_TxMailbox2CompleteCallback>
 80014b4:	e016      	b.n	80014e4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	e00c      	b.n	80014e4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e002      	b.n	80014e4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f949 	bl	8001776 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2210      	movs	r2, #16
 8001506:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2208      	movs	r2, #8
 8001522:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f930 	bl	800178a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff f81a 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2210      	movs	r2, #16
 800156a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2208      	movs	r2, #8
 8001586:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f912 	bl	80017b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f8f9 	bl	800179e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2210      	movs	r2, #16
 80015c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8fc 	bl	80017c6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00b      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2208      	movs	r2, #8
 80015e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8f5 	bl	80017da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d07b      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d072      	beq.n	80016ea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	2b00      	cmp	r3, #0
 8001660:	d043      	beq.n	80016ea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001668:	2b00      	cmp	r3, #0
 800166a:	d03e      	beq.n	80016ea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001672:	2b60      	cmp	r3, #96	; 0x60
 8001674:	d02b      	beq.n	80016ce <HAL_CAN_IRQHandler+0x32a>
 8001676:	2b60      	cmp	r3, #96	; 0x60
 8001678:	d82e      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 800167a:	2b50      	cmp	r3, #80	; 0x50
 800167c:	d022      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x320>
 800167e:	2b50      	cmp	r3, #80	; 0x50
 8001680:	d82a      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d019      	beq.n	80016ba <HAL_CAN_IRQHandler+0x316>
 8001686:	2b40      	cmp	r3, #64	; 0x40
 8001688:	d826      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 800168a:	2b30      	cmp	r3, #48	; 0x30
 800168c:	d010      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x30c>
 800168e:	2b30      	cmp	r3, #48	; 0x30
 8001690:	d822      	bhi.n	80016d8 <HAL_CAN_IRQHandler+0x334>
 8001692:	2b10      	cmp	r3, #16
 8001694:	d002      	beq.n	800169c <HAL_CAN_IRQHandler+0x2f8>
 8001696:	2b20      	cmp	r3, #32
 8001698:	d005      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800169a:	e01d      	b.n	80016d8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a4:	e019      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ae:	e014      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b8:	e00f      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c2:	e00a      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016cc:	e005      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016d6:	e000      	b.n	80016da <HAL_CAN_IRQHandler+0x336>
            break;
 80016d8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699a      	ldr	r2, [r3, #24]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016e8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f872 	bl	80017ee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e16b      	b.n	8001d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 815a 	bne.w	8001d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b4 	beq.w	8001d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b60      	ldr	r3, [pc, #384]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a5f      	ldr	r2, [pc, #380]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a5b      	ldr	r2, [pc, #364]	; (8001d38 <HAL_GPIO_Init+0x310>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x320>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x324>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x328>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <HAL_GPIO_Init+0x32c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <HAL_GPIO_Init+0x330>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00e      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00c      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c60:	4935      	ldr	r1, [pc, #212]	; (8001d38 <HAL_GPIO_Init+0x310>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d10:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f ae90 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021400 	.word	0x40021400
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40021c00 	.word	0x40021c00
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e267      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d075      	beq.n	8001e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db2:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbe:	4b85      	ldr	r3, [pc, #532]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d112      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05b      	beq.n	8001e9c <HAL_RCC_OscConfig+0x108>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d157      	bne.n	8001e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e242      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x74>
 8001dfa:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a75      	ldr	r2, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x98>
 8001e12:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6f      	ldr	r2, [pc, #444]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6c      	ldr	r2, [pc, #432]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	4b69      	ldr	r3, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a68      	ldr	r2, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff22 	bl	8000c94 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7fe ff1e 	bl	8000c94 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e207      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ff0e 	bl	8000c94 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe ff0a 	bl	8000c94 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1f3      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0xe8>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1c7      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4937      	ldr	r1, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_OscConfig+0x244>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fec3 	bl	8000c94 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7fe febf 	bl	8000c94 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1a8      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_OscConfig+0x244>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fea2 	bl	8000c94 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7fe fe9e 	bl	8000c94 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e187      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d036      	beq.n	8001fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0x248>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fe82 	bl	8000c94 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe fe7e 	bl	8000c94 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e167      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x200>
 8001fb2:	e01b      	b.n	8001fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0x248>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7fe fe6b 	bl	8000c94 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	e00e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7fe fe67 	bl	8000c94 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d907      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e150      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	42470000 	.word	0x42470000
 8001fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ea      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8097 	beq.w	8002128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a7c      	ldr	r2, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b7a      	ldr	r3, [pc, #488]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b77      	ldr	r3, [pc, #476]	; (8002208 <HAL_RCC_OscConfig+0x474>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b74      	ldr	r3, [pc, #464]	; (8002208 <HAL_RCC_OscConfig+0x474>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a73      	ldr	r2, [pc, #460]	; (8002208 <HAL_RCC_OscConfig+0x474>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7fe fe27 	bl	8000c94 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7fe fe23 	bl	8000c94 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e10c      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x474>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x2ea>
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x324>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x30c>
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6713      	str	r3, [r2, #112]	; 0x70
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5b      	ldr	r2, [pc, #364]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x324>
 80020a0:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b55      	ldr	r3, [pc, #340]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a54      	ldr	r2, [pc, #336]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7fe fde8 	bl	8000c94 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7fe fde4 	bl	8000c94 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0cb      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ee      	beq.n	80020c8 <HAL_RCC_OscConfig+0x334>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7fe fdd2 	bl	8000c94 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7fe fdce 	bl	8000c94 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0b5      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ee      	bne.n	80020f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a38      	ldr	r2, [pc, #224]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a1 	beq.w	8002274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002132:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b08      	cmp	r3, #8
 800213c:	d05c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d141      	bne.n	80021ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x478>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7fe fda2 	bl	8000c94 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fd9e 	bl	8000c94 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e087      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	491b      	ldr	r1, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x478>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fd77 	bl	8000c94 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7fe fd73 	bl	8000c94 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e05c      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x416>
 80021c8:	e054      	b.n	8002274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x478>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fd60 	bl	8000c94 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fd5c 	bl	8000c94 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e045      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x470>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x444>
 80021f6:	e03d      	b.n	8002274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e038      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000
 800220c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x4ec>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d028      	beq.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d121      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d11a      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002248:	4293      	cmp	r3, r2
 800224a:	d111      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0cc      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b68      	ldr	r3, [pc, #416]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90c      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d044      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d119      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d003      	beq.n	8002342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e067      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002362:	4b37      	ldr	r3, [pc, #220]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4934      	ldr	r1, [pc, #208]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002374:	f7fe fc8e 	bl	8000c94 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	e00a      	b.n	8002392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237c:	f7fe fc8a 	bl	8000c94 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e04f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 020c 	and.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1eb      	bne.n	800237c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d20c      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe fbee 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00
 8002440:	40023800 	.word	0x40023800
 8002444:	080037bc 	.word	0x080037bc
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002454:	b094      	sub	sp, #80	; 0x50
 8002456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	647b      	str	r3, [r7, #68]	; 0x44
 800245c:	2300      	movs	r3, #0
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002460:	2300      	movs	r3, #0
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002468:	4b79      	ldr	r3, [pc, #484]	; (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d00d      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 8002474:	2b08      	cmp	r3, #8
 8002476:	f200 80e1 	bhi.w	800263c <HAL_RCC_GetSysClockFreq+0x1ec>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x34>
 800247e:	2b04      	cmp	r3, #4
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
 8002482:	e0db      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b73      	ldr	r3, [pc, #460]	; (8002654 <HAL_RCC_GetSysClockFreq+0x204>)
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002488:	e0db      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b73      	ldr	r3, [pc, #460]	; (8002658 <HAL_RCC_GetSysClockFreq+0x208>)
 800248c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800248e:	e0d8      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d063      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a6:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	2200      	movs	r2, #0
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
 80024be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	f04f 0000 	mov.w	r0, #0
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	0159      	lsls	r1, r3, #5
 80024d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d4:	0150      	lsls	r0, r2, #5
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4621      	mov	r1, r4
 80024dc:	1a51      	subs	r1, r2, r1
 80024de:	6139      	str	r1, [r7, #16]
 80024e0:	4629      	mov	r1, r5
 80024e2:	eb63 0301 	sbc.w	r3, r3, r1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024f4:	4659      	mov	r1, fp
 80024f6:	018b      	lsls	r3, r1, #6
 80024f8:	4651      	mov	r1, sl
 80024fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024fe:	4651      	mov	r1, sl
 8002500:	018a      	lsls	r2, r1, #6
 8002502:	4651      	mov	r1, sl
 8002504:	ebb2 0801 	subs.w	r8, r2, r1
 8002508:	4659      	mov	r1, fp
 800250a:	eb63 0901 	sbc.w	r9, r3, r1
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800251a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800251e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002522:	4690      	mov	r8, r2
 8002524:	4699      	mov	r9, r3
 8002526:	4623      	mov	r3, r4
 8002528:	eb18 0303 	adds.w	r3, r8, r3
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	462b      	mov	r3, r5
 8002530:	eb49 0303 	adc.w	r3, r9, r3
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002542:	4629      	mov	r1, r5
 8002544:	024b      	lsls	r3, r1, #9
 8002546:	4621      	mov	r1, r4
 8002548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800254c:	4621      	mov	r1, r4
 800254e:	024a      	lsls	r2, r1, #9
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002556:	2200      	movs	r2, #0
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
 800255a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800255c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002560:	f7fd fe8e 	bl	8000280 <__aeabi_uldivmod>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4613      	mov	r3, r2
 800256a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800256c:	e058      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	2200      	movs	r2, #0
 8002576:	4618      	mov	r0, r3
 8002578:	4611      	mov	r1, r2
 800257a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	f04f 0000 	mov.w	r0, #0
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	0159      	lsls	r1, r3, #5
 8002596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259a:	0150      	lsls	r0, r2, #5
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4641      	mov	r1, r8
 80025a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025a6:	4649      	mov	r1, r9
 80025a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c0:	ebb2 040a 	subs.w	r4, r2, sl
 80025c4:	eb63 050b 	sbc.w	r5, r3, fp
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	00eb      	lsls	r3, r5, #3
 80025d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	4643      	mov	r3, r8
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	464b      	mov	r3, r9
 80025e4:	eb45 0303 	adc.w	r3, r5, r3
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f6:	4629      	mov	r1, r5
 80025f8:	028b      	lsls	r3, r1, #10
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002600:	4621      	mov	r1, r4
 8002602:	028a      	lsls	r2, r1, #10
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260a:	2200      	movs	r2, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	61fa      	str	r2, [r7, #28]
 8002610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002614:	f7fd fe34 	bl	8000280 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetSysClockFreq+0x204>)
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002644:	4618      	mov	r0, r3
 8002646:	3750      	adds	r7, #80	; 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400
 8002658:	007a1200 	.word	0x007a1200

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_GetHCLKFreq+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff0 	bl	800265c <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	080037cc 	.word	0x080037cc

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026a0:	f7ff ffdc 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0b5b      	lsrs	r3, r3, #13
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	080037cc 	.word	0x080037cc

080026c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03f      	b.n	8002756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe f97e 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f929 	bl	8002960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800271c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800272c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800273c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b08a      	sub	sp, #40	; 0x28
 8002762:	af02      	add	r7, sp, #8
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	d17c      	bne.n	8002878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Transmit+0x2c>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e075      	b.n	800287a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_UART_Transmit+0x3e>
 8002798:	2302      	movs	r3, #2
 800279a:	e06e      	b.n	800287a <HAL_UART_Transmit+0x11c>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	; 0x21
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fe fa6f 	bl	8000c94 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027cc:	d108      	bne.n	80027e0 <HAL_UART_Transmit+0x82>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027f0:	e02a      	b.n	8002848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f840 	bl	8002882 <UART_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e036      	b.n	800287a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3302      	adds	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e007      	b.n	800283a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1cf      	bne.n	80027f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	; 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f810 	bl	8002882 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e006      	b.n	800287a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b090      	sub	sp, #64	; 0x40
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002892:	e050      	b.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289a:	d04c      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80028a2:	f7fe f9f7 	bl	8000c94 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d241      	bcs.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d2:	637a      	str	r2, [r7, #52]	; 0x34
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e5      	bne.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	613b      	str	r3, [r7, #16]
   return(result);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002906:	623a      	str	r2, [r7, #32]
 8002908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	69f9      	ldr	r1, [r7, #28]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	61bb      	str	r3, [r7, #24]
   return(result);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e00f      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	429a      	cmp	r2, r3
 8002952:	d09f      	beq.n	8002894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3740      	adds	r7, #64	; 0x40
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002964:	b0c0      	sub	sp, #256	; 0x100
 8002966:	af00      	add	r7, sp, #0
 8002968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	68d9      	ldr	r1, [r3, #12]
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	ea40 0301 	orr.w	r3, r0, r1
 8002988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	431a      	orrs	r2, r3
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029b8:	f021 010c 	bic.w	r1, r1, #12
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029c6:	430b      	orrs	r3, r1
 80029c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	6999      	ldr	r1, [r3, #24]
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	ea40 0301 	orr.w	r3, r0, r1
 80029e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b8f      	ldr	r3, [pc, #572]	; (8002c2c <UART_SetConfig+0x2cc>)
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d005      	beq.n	8002a00 <UART_SetConfig+0xa0>
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b8d      	ldr	r3, [pc, #564]	; (8002c30 <UART_SetConfig+0x2d0>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d104      	bne.n	8002a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a00:	f7ff fe4c 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 8002a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a08:	e003      	b.n	8002a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a0a:	f7ff fe33 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8002a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1c:	f040 810c 	bne.w	8002c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	1891      	adds	r1, r2, r2
 8002a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a3a:	415b      	adcs	r3, r3
 8002a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a42:	4621      	mov	r1, r4
 8002a44:	eb12 0801 	adds.w	r8, r2, r1
 8002a48:	4629      	mov	r1, r5
 8002a4a:	eb43 0901 	adc.w	r9, r3, r1
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a62:	4690      	mov	r8, r2
 8002a64:	4699      	mov	r9, r3
 8002a66:	4623      	mov	r3, r4
 8002a68:	eb18 0303 	adds.w	r3, r8, r3
 8002a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a70:	462b      	mov	r3, r5
 8002a72:	eb49 0303 	adc.w	r3, r9, r3
 8002a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a8e:	460b      	mov	r3, r1
 8002a90:	18db      	adds	r3, r3, r3
 8002a92:	653b      	str	r3, [r7, #80]	; 0x50
 8002a94:	4613      	mov	r3, r2
 8002a96:	eb42 0303 	adc.w	r3, r2, r3
 8002a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aa4:	f7fd fbec 	bl	8000280 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <UART_SetConfig+0x2d4>)
 8002aae:	fba3 2302 	umull	r2, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	011c      	lsls	r4, r3, #4
 8002ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aba:	2200      	movs	r2, #0
 8002abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ac8:	4642      	mov	r2, r8
 8002aca:	464b      	mov	r3, r9
 8002acc:	1891      	adds	r1, r2, r2
 8002ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ad0:	415b      	adcs	r3, r3
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ad8:	4641      	mov	r1, r8
 8002ada:	eb12 0a01 	adds.w	sl, r2, r1
 8002ade:	4649      	mov	r1, r9
 8002ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af8:	4692      	mov	sl, r2
 8002afa:	469b      	mov	fp, r3
 8002afc:	4643      	mov	r3, r8
 8002afe:	eb1a 0303 	adds.w	r3, sl, r3
 8002b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b06:	464b      	mov	r3, r9
 8002b08:	eb4b 0303 	adc.w	r3, fp, r3
 8002b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b24:	460b      	mov	r3, r1
 8002b26:	18db      	adds	r3, r3, r3
 8002b28:	643b      	str	r3, [r7, #64]	; 0x40
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	eb42 0303 	adc.w	r3, r2, r3
 8002b30:	647b      	str	r3, [r7, #68]	; 0x44
 8002b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b3a:	f7fd fba1 	bl	8000280 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <UART_SetConfig+0x2d4>)
 8002b46:	fba3 2301 	umull	r2, r3, r3, r1
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2264      	movs	r2, #100	; 0x64
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	1acb      	subs	r3, r1, r3
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <UART_SetConfig+0x2d4>)
 8002b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b68:	441c      	add	r4, r3
 8002b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	464b      	mov	r3, r9
 8002b80:	1891      	adds	r1, r2, r2
 8002b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b84:	415b      	adcs	r3, r3
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	1851      	adds	r1, r2, r1
 8002b90:	6339      	str	r1, [r7, #48]	; 0x30
 8002b92:	4649      	mov	r1, r9
 8002b94:	414b      	adcs	r3, r1
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	00cb      	lsls	r3, r1, #3
 8002ba8:	4651      	mov	r1, sl
 8002baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bae:	4651      	mov	r1, sl
 8002bb0:	00ca      	lsls	r2, r1, #3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4642      	mov	r2, r8
 8002bba:	189b      	adds	r3, r3, r2
 8002bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	460a      	mov	r2, r1
 8002bc4:	eb42 0303 	adc.w	r3, r2, r3
 8002bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002be0:	460b      	mov	r3, r1
 8002be2:	18db      	adds	r3, r3, r3
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be6:	4613      	mov	r3, r2
 8002be8:	eb42 0303 	adc.w	r3, r2, r3
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bf6:	f7fd fb43 	bl	8000280 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <UART_SetConfig+0x2d4>)
 8002c00:	fba3 1302 	umull	r1, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	2164      	movs	r1, #100	; 0x64
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	3332      	adds	r3, #50	; 0x32
 8002c12:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <UART_SetConfig+0x2d4>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	f003 0207 	and.w	r2, r3, #7
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4422      	add	r2, r4
 8002c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c28:	e106      	b.n	8002e38 <UART_SetConfig+0x4d8>
 8002c2a:	bf00      	nop
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	40011400 	.word	0x40011400
 8002c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c4a:	4642      	mov	r2, r8
 8002c4c:	464b      	mov	r3, r9
 8002c4e:	1891      	adds	r1, r2, r2
 8002c50:	6239      	str	r1, [r7, #32]
 8002c52:	415b      	adcs	r3, r3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	1854      	adds	r4, r2, r1
 8002c5e:	4649      	mov	r1, r9
 8002c60:	eb43 0501 	adc.w	r5, r3, r1
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	00eb      	lsls	r3, r5, #3
 8002c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c72:	00e2      	lsls	r2, r4, #3
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	4643      	mov	r3, r8
 8002c7a:	18e3      	adds	r3, r4, r3
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c80:	464b      	mov	r3, r9
 8002c82:	eb45 0303 	adc.w	r3, r5, r3
 8002c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	008b      	lsls	r3, r1, #2
 8002caa:	4621      	mov	r1, r4
 8002cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	008a      	lsls	r2, r1, #2
 8002cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cb8:	f7fd fae2 	bl	8000280 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <UART_SetConfig+0x4e4>)
 8002cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	011c      	lsls	r4, r3, #4
 8002cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cdc:	4642      	mov	r2, r8
 8002cde:	464b      	mov	r3, r9
 8002ce0:	1891      	adds	r1, r2, r2
 8002ce2:	61b9      	str	r1, [r7, #24]
 8002ce4:	415b      	adcs	r3, r3
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cec:	4641      	mov	r1, r8
 8002cee:	1851      	adds	r1, r2, r1
 8002cf0:	6139      	str	r1, [r7, #16]
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	414b      	adcs	r3, r1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d04:	4659      	mov	r1, fp
 8002d06:	00cb      	lsls	r3, r1, #3
 8002d08:	4651      	mov	r1, sl
 8002d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0e:	4651      	mov	r1, sl
 8002d10:	00ca      	lsls	r2, r1, #3
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	4642      	mov	r2, r8
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d20:	464b      	mov	r3, r9
 8002d22:	460a      	mov	r2, r1
 8002d24:	eb42 0303 	adc.w	r3, r2, r3
 8002d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d44:	4649      	mov	r1, r9
 8002d46:	008b      	lsls	r3, r1, #2
 8002d48:	4641      	mov	r1, r8
 8002d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d4e:	4641      	mov	r1, r8
 8002d50:	008a      	lsls	r2, r1, #2
 8002d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d56:	f7fd fa93 	bl	8000280 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <UART_SetConfig+0x4e4>)
 8002d62:	fba3 2301 	umull	r2, r3, r3, r1
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2264      	movs	r2, #100	; 0x64
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	1acb      	subs	r3, r1, r3
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	3332      	adds	r3, #50	; 0x32
 8002d74:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <UART_SetConfig+0x4e4>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d80:	441c      	add	r4, r3
 8002d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d86:	2200      	movs	r2, #0
 8002d88:	673b      	str	r3, [r7, #112]	; 0x70
 8002d8a:	677a      	str	r2, [r7, #116]	; 0x74
 8002d8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da0:	4641      	mov	r1, r8
 8002da2:	1851      	adds	r1, r2, r1
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	4649      	mov	r1, r9
 8002da8:	414b      	adcs	r3, r1
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002db8:	4659      	mov	r1, fp
 8002dba:	00cb      	lsls	r3, r1, #3
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	00ca      	lsls	r2, r1, #3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4642      	mov	r2, r8
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	eb42 0303 	adc.w	r3, r2, r3
 8002dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	663b      	str	r3, [r7, #96]	; 0x60
 8002de6:	667a      	str	r2, [r7, #100]	; 0x64
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002df4:	4649      	mov	r1, r9
 8002df6:	008b      	lsls	r3, r1, #2
 8002df8:	4641      	mov	r1, r8
 8002dfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dfe:	4641      	mov	r1, r8
 8002e00:	008a      	lsls	r2, r1, #2
 8002e02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e06:	f7fd fa3b 	bl	8000280 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <UART_SetConfig+0x4e4>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2164      	movs	r1, #100	; 0x64
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <UART_SetConfig+0x4e4>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4422      	add	r2, r4
 8002e36:	609a      	str	r2, [r3, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e44:	51eb851f 	.word	0x51eb851f

08002e48 <siprintf>:
 8002e48:	b40e      	push	{r1, r2, r3}
 8002e4a:	b500      	push	{lr}
 8002e4c:	b09c      	sub	sp, #112	; 0x70
 8002e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e50:	9002      	str	r0, [sp, #8]
 8002e52:	9006      	str	r0, [sp, #24]
 8002e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <siprintf+0x38>)
 8002e5a:	9107      	str	r1, [sp, #28]
 8002e5c:	9104      	str	r1, [sp, #16]
 8002e5e:	4909      	ldr	r1, [pc, #36]	; (8002e84 <siprintf+0x3c>)
 8002e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e64:	9105      	str	r1, [sp, #20]
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	a902      	add	r1, sp, #8
 8002e6c:	f000 f992 	bl	8003194 <_svfiprintf_r>
 8002e70:	9b02      	ldr	r3, [sp, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	b01c      	add	sp, #112	; 0x70
 8002e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e7c:	b003      	add	sp, #12
 8002e7e:	4770      	bx	lr
 8002e80:	20000058 	.word	0x20000058
 8002e84:	ffff0208 	.word	0xffff0208

08002e88 <memset>:
 8002e88:	4402      	add	r2, r0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__errno>:
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <__errno+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000058 	.word	0x20000058

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4d0d      	ldr	r5, [pc, #52]	; (8002edc <__libc_init_array+0x38>)
 8002ea8:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	2600      	movs	r6, #0
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	4d0b      	ldr	r5, [pc, #44]	; (8002ee4 <__libc_init_array+0x40>)
 8002eb6:	4c0c      	ldr	r4, [pc, #48]	; (8002ee8 <__libc_init_array+0x44>)
 8002eb8:	f000 fc6a 	bl	8003790 <_init>
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08003810 	.word	0x08003810
 8002ee0:	08003810 	.word	0x08003810
 8002ee4:	08003810 	.word	0x08003810
 8002ee8:	08003814 	.word	0x08003814

08002eec <__retarget_lock_acquire_recursive>:
 8002eec:	4770      	bx	lr

08002eee <__retarget_lock_release_recursive>:
 8002eee:	4770      	bx	lr

08002ef0 <_free_r>:
 8002ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ef2:	2900      	cmp	r1, #0
 8002ef4:	d044      	beq.n	8002f80 <_free_r+0x90>
 8002ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002efa:	9001      	str	r0, [sp, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f1a1 0404 	sub.w	r4, r1, #4
 8002f02:	bfb8      	it	lt
 8002f04:	18e4      	addlt	r4, r4, r3
 8002f06:	f000 f8df 	bl	80030c8 <__malloc_lock>
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <_free_r+0x94>)
 8002f0c:	9801      	ldr	r0, [sp, #4]
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	b933      	cbnz	r3, 8002f20 <_free_r+0x30>
 8002f12:	6063      	str	r3, [r4, #4]
 8002f14:	6014      	str	r4, [r2, #0]
 8002f16:	b003      	add	sp, #12
 8002f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f1c:	f000 b8da 	b.w	80030d4 <__malloc_unlock>
 8002f20:	42a3      	cmp	r3, r4
 8002f22:	d908      	bls.n	8002f36 <_free_r+0x46>
 8002f24:	6825      	ldr	r5, [r4, #0]
 8002f26:	1961      	adds	r1, r4, r5
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	bf01      	itttt	eq
 8002f2c:	6819      	ldreq	r1, [r3, #0]
 8002f2e:	685b      	ldreq	r3, [r3, #4]
 8002f30:	1949      	addeq	r1, r1, r5
 8002f32:	6021      	streq	r1, [r4, #0]
 8002f34:	e7ed      	b.n	8002f12 <_free_r+0x22>
 8002f36:	461a      	mov	r2, r3
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b10b      	cbz	r3, 8002f40 <_free_r+0x50>
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d9fa      	bls.n	8002f36 <_free_r+0x46>
 8002f40:	6811      	ldr	r1, [r2, #0]
 8002f42:	1855      	adds	r5, r2, r1
 8002f44:	42a5      	cmp	r5, r4
 8002f46:	d10b      	bne.n	8002f60 <_free_r+0x70>
 8002f48:	6824      	ldr	r4, [r4, #0]
 8002f4a:	4421      	add	r1, r4
 8002f4c:	1854      	adds	r4, r2, r1
 8002f4e:	42a3      	cmp	r3, r4
 8002f50:	6011      	str	r1, [r2, #0]
 8002f52:	d1e0      	bne.n	8002f16 <_free_r+0x26>
 8002f54:	681c      	ldr	r4, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	440c      	add	r4, r1
 8002f5c:	6014      	str	r4, [r2, #0]
 8002f5e:	e7da      	b.n	8002f16 <_free_r+0x26>
 8002f60:	d902      	bls.n	8002f68 <_free_r+0x78>
 8002f62:	230c      	movs	r3, #12
 8002f64:	6003      	str	r3, [r0, #0]
 8002f66:	e7d6      	b.n	8002f16 <_free_r+0x26>
 8002f68:	6825      	ldr	r5, [r4, #0]
 8002f6a:	1961      	adds	r1, r4, r5
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	bf04      	itt	eq
 8002f70:	6819      	ldreq	r1, [r3, #0]
 8002f72:	685b      	ldreq	r3, [r3, #4]
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	bf04      	itt	eq
 8002f78:	1949      	addeq	r1, r1, r5
 8002f7a:	6021      	streq	r1, [r4, #0]
 8002f7c:	6054      	str	r4, [r2, #4]
 8002f7e:	e7ca      	b.n	8002f16 <_free_r+0x26>
 8002f80:	b003      	add	sp, #12
 8002f82:	bd30      	pop	{r4, r5, pc}
 8002f84:	20000268 	.word	0x20000268

08002f88 <sbrk_aligned>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4e0e      	ldr	r6, [pc, #56]	; (8002fc4 <sbrk_aligned+0x3c>)
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	6831      	ldr	r1, [r6, #0]
 8002f90:	4605      	mov	r5, r0
 8002f92:	b911      	cbnz	r1, 8002f9a <sbrk_aligned+0x12>
 8002f94:	f000 fba6 	bl	80036e4 <_sbrk_r>
 8002f98:	6030      	str	r0, [r6, #0]
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 fba1 	bl	80036e4 <_sbrk_r>
 8002fa2:	1c43      	adds	r3, r0, #1
 8002fa4:	d00a      	beq.n	8002fbc <sbrk_aligned+0x34>
 8002fa6:	1cc4      	adds	r4, r0, #3
 8002fa8:	f024 0403 	bic.w	r4, r4, #3
 8002fac:	42a0      	cmp	r0, r4
 8002fae:	d007      	beq.n	8002fc0 <sbrk_aligned+0x38>
 8002fb0:	1a21      	subs	r1, r4, r0
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 fb96 	bl	80036e4 <_sbrk_r>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d101      	bne.n	8002fc0 <sbrk_aligned+0x38>
 8002fbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	2000026c 	.word	0x2000026c

08002fc8 <_malloc_r>:
 8002fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fcc:	1ccd      	adds	r5, r1, #3
 8002fce:	f025 0503 	bic.w	r5, r5, #3
 8002fd2:	3508      	adds	r5, #8
 8002fd4:	2d0c      	cmp	r5, #12
 8002fd6:	bf38      	it	cc
 8002fd8:	250c      	movcc	r5, #12
 8002fda:	2d00      	cmp	r5, #0
 8002fdc:	4607      	mov	r7, r0
 8002fde:	db01      	blt.n	8002fe4 <_malloc_r+0x1c>
 8002fe0:	42a9      	cmp	r1, r5
 8002fe2:	d905      	bls.n	8002ff0 <_malloc_r+0x28>
 8002fe4:	230c      	movs	r3, #12
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	2600      	movs	r6, #0
 8002fea:	4630      	mov	r0, r6
 8002fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ff0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030c4 <_malloc_r+0xfc>
 8002ff4:	f000 f868 	bl	80030c8 <__malloc_lock>
 8002ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8002ffc:	461c      	mov	r4, r3
 8002ffe:	bb5c      	cbnz	r4, 8003058 <_malloc_r+0x90>
 8003000:	4629      	mov	r1, r5
 8003002:	4638      	mov	r0, r7
 8003004:	f7ff ffc0 	bl	8002f88 <sbrk_aligned>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	4604      	mov	r4, r0
 800300c:	d155      	bne.n	80030ba <_malloc_r+0xf2>
 800300e:	f8d8 4000 	ldr.w	r4, [r8]
 8003012:	4626      	mov	r6, r4
 8003014:	2e00      	cmp	r6, #0
 8003016:	d145      	bne.n	80030a4 <_malloc_r+0xdc>
 8003018:	2c00      	cmp	r4, #0
 800301a:	d048      	beq.n	80030ae <_malloc_r+0xe6>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	4631      	mov	r1, r6
 8003020:	4638      	mov	r0, r7
 8003022:	eb04 0903 	add.w	r9, r4, r3
 8003026:	f000 fb5d 	bl	80036e4 <_sbrk_r>
 800302a:	4581      	cmp	r9, r0
 800302c:	d13f      	bne.n	80030ae <_malloc_r+0xe6>
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	1a6d      	subs	r5, r5, r1
 8003032:	4629      	mov	r1, r5
 8003034:	4638      	mov	r0, r7
 8003036:	f7ff ffa7 	bl	8002f88 <sbrk_aligned>
 800303a:	3001      	adds	r0, #1
 800303c:	d037      	beq.n	80030ae <_malloc_r+0xe6>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	442b      	add	r3, r5
 8003042:	6023      	str	r3, [r4, #0]
 8003044:	f8d8 3000 	ldr.w	r3, [r8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d038      	beq.n	80030be <_malloc_r+0xf6>
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	42a2      	cmp	r2, r4
 8003050:	d12b      	bne.n	80030aa <_malloc_r+0xe2>
 8003052:	2200      	movs	r2, #0
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	e00f      	b.n	8003078 <_malloc_r+0xb0>
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	1b52      	subs	r2, r2, r5
 800305c:	d41f      	bmi.n	800309e <_malloc_r+0xd6>
 800305e:	2a0b      	cmp	r2, #11
 8003060:	d917      	bls.n	8003092 <_malloc_r+0xca>
 8003062:	1961      	adds	r1, r4, r5
 8003064:	42a3      	cmp	r3, r4
 8003066:	6025      	str	r5, [r4, #0]
 8003068:	bf18      	it	ne
 800306a:	6059      	strne	r1, [r3, #4]
 800306c:	6863      	ldr	r3, [r4, #4]
 800306e:	bf08      	it	eq
 8003070:	f8c8 1000 	streq.w	r1, [r8]
 8003074:	5162      	str	r2, [r4, r5]
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	4638      	mov	r0, r7
 800307a:	f104 060b 	add.w	r6, r4, #11
 800307e:	f000 f829 	bl	80030d4 <__malloc_unlock>
 8003082:	f026 0607 	bic.w	r6, r6, #7
 8003086:	1d23      	adds	r3, r4, #4
 8003088:	1af2      	subs	r2, r6, r3
 800308a:	d0ae      	beq.n	8002fea <_malloc_r+0x22>
 800308c:	1b9b      	subs	r3, r3, r6
 800308e:	50a3      	str	r3, [r4, r2]
 8003090:	e7ab      	b.n	8002fea <_malloc_r+0x22>
 8003092:	42a3      	cmp	r3, r4
 8003094:	6862      	ldr	r2, [r4, #4]
 8003096:	d1dd      	bne.n	8003054 <_malloc_r+0x8c>
 8003098:	f8c8 2000 	str.w	r2, [r8]
 800309c:	e7ec      	b.n	8003078 <_malloc_r+0xb0>
 800309e:	4623      	mov	r3, r4
 80030a0:	6864      	ldr	r4, [r4, #4]
 80030a2:	e7ac      	b.n	8002ffe <_malloc_r+0x36>
 80030a4:	4634      	mov	r4, r6
 80030a6:	6876      	ldr	r6, [r6, #4]
 80030a8:	e7b4      	b.n	8003014 <_malloc_r+0x4c>
 80030aa:	4613      	mov	r3, r2
 80030ac:	e7cc      	b.n	8003048 <_malloc_r+0x80>
 80030ae:	230c      	movs	r3, #12
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4638      	mov	r0, r7
 80030b4:	f000 f80e 	bl	80030d4 <__malloc_unlock>
 80030b8:	e797      	b.n	8002fea <_malloc_r+0x22>
 80030ba:	6025      	str	r5, [r4, #0]
 80030bc:	e7dc      	b.n	8003078 <_malloc_r+0xb0>
 80030be:	605b      	str	r3, [r3, #4]
 80030c0:	deff      	udf	#255	; 0xff
 80030c2:	bf00      	nop
 80030c4:	20000268 	.word	0x20000268

080030c8 <__malloc_lock>:
 80030c8:	4801      	ldr	r0, [pc, #4]	; (80030d0 <__malloc_lock+0x8>)
 80030ca:	f7ff bf0f 	b.w	8002eec <__retarget_lock_acquire_recursive>
 80030ce:	bf00      	nop
 80030d0:	20000264 	.word	0x20000264

080030d4 <__malloc_unlock>:
 80030d4:	4801      	ldr	r0, [pc, #4]	; (80030dc <__malloc_unlock+0x8>)
 80030d6:	f7ff bf0a 	b.w	8002eee <__retarget_lock_release_recursive>
 80030da:	bf00      	nop
 80030dc:	20000264 	.word	0x20000264

080030e0 <__ssputs_r>:
 80030e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	688e      	ldr	r6, [r1, #8]
 80030e6:	461f      	mov	r7, r3
 80030e8:	42be      	cmp	r6, r7
 80030ea:	680b      	ldr	r3, [r1, #0]
 80030ec:	4682      	mov	sl, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	4690      	mov	r8, r2
 80030f2:	d82c      	bhi.n	800314e <__ssputs_r+0x6e>
 80030f4:	898a      	ldrh	r2, [r1, #12]
 80030f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030fa:	d026      	beq.n	800314a <__ssputs_r+0x6a>
 80030fc:	6965      	ldr	r5, [r4, #20]
 80030fe:	6909      	ldr	r1, [r1, #16]
 8003100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003104:	eba3 0901 	sub.w	r9, r3, r1
 8003108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800310c:	1c7b      	adds	r3, r7, #1
 800310e:	444b      	add	r3, r9
 8003110:	106d      	asrs	r5, r5, #1
 8003112:	429d      	cmp	r5, r3
 8003114:	bf38      	it	cc
 8003116:	461d      	movcc	r5, r3
 8003118:	0553      	lsls	r3, r2, #21
 800311a:	d527      	bpl.n	800316c <__ssputs_r+0x8c>
 800311c:	4629      	mov	r1, r5
 800311e:	f7ff ff53 	bl	8002fc8 <_malloc_r>
 8003122:	4606      	mov	r6, r0
 8003124:	b360      	cbz	r0, 8003180 <__ssputs_r+0xa0>
 8003126:	6921      	ldr	r1, [r4, #16]
 8003128:	464a      	mov	r2, r9
 800312a:	f000 faeb 	bl	8003704 <memcpy>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	81a3      	strh	r3, [r4, #12]
 800313a:	6126      	str	r6, [r4, #16]
 800313c:	6165      	str	r5, [r4, #20]
 800313e:	444e      	add	r6, r9
 8003140:	eba5 0509 	sub.w	r5, r5, r9
 8003144:	6026      	str	r6, [r4, #0]
 8003146:	60a5      	str	r5, [r4, #8]
 8003148:	463e      	mov	r6, r7
 800314a:	42be      	cmp	r6, r7
 800314c:	d900      	bls.n	8003150 <__ssputs_r+0x70>
 800314e:	463e      	mov	r6, r7
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	4632      	mov	r2, r6
 8003154:	4641      	mov	r1, r8
 8003156:	f000 faab 	bl	80036b0 <memmove>
 800315a:	68a3      	ldr	r3, [r4, #8]
 800315c:	1b9b      	subs	r3, r3, r6
 800315e:	60a3      	str	r3, [r4, #8]
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	4433      	add	r3, r6
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	2000      	movs	r0, #0
 8003168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316c:	462a      	mov	r2, r5
 800316e:	f000 fad7 	bl	8003720 <_realloc_r>
 8003172:	4606      	mov	r6, r0
 8003174:	2800      	cmp	r0, #0
 8003176:	d1e0      	bne.n	800313a <__ssputs_r+0x5a>
 8003178:	6921      	ldr	r1, [r4, #16]
 800317a:	4650      	mov	r0, sl
 800317c:	f7ff feb8 	bl	8002ef0 <_free_r>
 8003180:	230c      	movs	r3, #12
 8003182:	f8ca 3000 	str.w	r3, [sl]
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003192:	e7e9      	b.n	8003168 <__ssputs_r+0x88>

08003194 <_svfiprintf_r>:
 8003194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003198:	4698      	mov	r8, r3
 800319a:	898b      	ldrh	r3, [r1, #12]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	b09d      	sub	sp, #116	; 0x74
 80031a0:	4607      	mov	r7, r0
 80031a2:	460d      	mov	r5, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	d50e      	bpl.n	80031c6 <_svfiprintf_r+0x32>
 80031a8:	690b      	ldr	r3, [r1, #16]
 80031aa:	b963      	cbnz	r3, 80031c6 <_svfiprintf_r+0x32>
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	f7ff ff0b 	bl	8002fc8 <_malloc_r>
 80031b2:	6028      	str	r0, [r5, #0]
 80031b4:	6128      	str	r0, [r5, #16]
 80031b6:	b920      	cbnz	r0, 80031c2 <_svfiprintf_r+0x2e>
 80031b8:	230c      	movs	r3, #12
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c0:	e0d0      	b.n	8003364 <_svfiprintf_r+0x1d0>
 80031c2:	2340      	movs	r3, #64	; 0x40
 80031c4:	616b      	str	r3, [r5, #20]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9309      	str	r3, [sp, #36]	; 0x24
 80031ca:	2320      	movs	r3, #32
 80031cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80031d4:	2330      	movs	r3, #48	; 0x30
 80031d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800337c <_svfiprintf_r+0x1e8>
 80031da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031de:	f04f 0901 	mov.w	r9, #1
 80031e2:	4623      	mov	r3, r4
 80031e4:	469a      	mov	sl, r3
 80031e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ea:	b10a      	cbz	r2, 80031f0 <_svfiprintf_r+0x5c>
 80031ec:	2a25      	cmp	r2, #37	; 0x25
 80031ee:	d1f9      	bne.n	80031e4 <_svfiprintf_r+0x50>
 80031f0:	ebba 0b04 	subs.w	fp, sl, r4
 80031f4:	d00b      	beq.n	800320e <_svfiprintf_r+0x7a>
 80031f6:	465b      	mov	r3, fp
 80031f8:	4622      	mov	r2, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	4638      	mov	r0, r7
 80031fe:	f7ff ff6f 	bl	80030e0 <__ssputs_r>
 8003202:	3001      	adds	r0, #1
 8003204:	f000 80a9 	beq.w	800335a <_svfiprintf_r+0x1c6>
 8003208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800320a:	445a      	add	r2, fp
 800320c:	9209      	str	r2, [sp, #36]	; 0x24
 800320e:	f89a 3000 	ldrb.w	r3, [sl]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a1 	beq.w	800335a <_svfiprintf_r+0x1c6>
 8003218:	2300      	movs	r3, #0
 800321a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003222:	f10a 0a01 	add.w	sl, sl, #1
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	9307      	str	r3, [sp, #28]
 800322a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800322e:	931a      	str	r3, [sp, #104]	; 0x68
 8003230:	4654      	mov	r4, sl
 8003232:	2205      	movs	r2, #5
 8003234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003238:	4850      	ldr	r0, [pc, #320]	; (800337c <_svfiprintf_r+0x1e8>)
 800323a:	f7fc ffd1 	bl	80001e0 <memchr>
 800323e:	9a04      	ldr	r2, [sp, #16]
 8003240:	b9d8      	cbnz	r0, 800327a <_svfiprintf_r+0xe6>
 8003242:	06d0      	lsls	r0, r2, #27
 8003244:	bf44      	itt	mi
 8003246:	2320      	movmi	r3, #32
 8003248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800324c:	0711      	lsls	r1, r2, #28
 800324e:	bf44      	itt	mi
 8003250:	232b      	movmi	r3, #43	; 0x2b
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003256:	f89a 3000 	ldrb.w	r3, [sl]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d015      	beq.n	800328a <_svfiprintf_r+0xf6>
 800325e:	9a07      	ldr	r2, [sp, #28]
 8003260:	4654      	mov	r4, sl
 8003262:	2000      	movs	r0, #0
 8003264:	f04f 0c0a 	mov.w	ip, #10
 8003268:	4621      	mov	r1, r4
 800326a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800326e:	3b30      	subs	r3, #48	; 0x30
 8003270:	2b09      	cmp	r3, #9
 8003272:	d94d      	bls.n	8003310 <_svfiprintf_r+0x17c>
 8003274:	b1b0      	cbz	r0, 80032a4 <_svfiprintf_r+0x110>
 8003276:	9207      	str	r2, [sp, #28]
 8003278:	e014      	b.n	80032a4 <_svfiprintf_r+0x110>
 800327a:	eba0 0308 	sub.w	r3, r0, r8
 800327e:	fa09 f303 	lsl.w	r3, r9, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	9304      	str	r3, [sp, #16]
 8003286:	46a2      	mov	sl, r4
 8003288:	e7d2      	b.n	8003230 <_svfiprintf_r+0x9c>
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	1d19      	adds	r1, r3, #4
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	9103      	str	r1, [sp, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bfbb      	ittet	lt
 8003296:	425b      	neglt	r3, r3
 8003298:	f042 0202 	orrlt.w	r2, r2, #2
 800329c:	9307      	strge	r3, [sp, #28]
 800329e:	9307      	strlt	r3, [sp, #28]
 80032a0:	bfb8      	it	lt
 80032a2:	9204      	strlt	r2, [sp, #16]
 80032a4:	7823      	ldrb	r3, [r4, #0]
 80032a6:	2b2e      	cmp	r3, #46	; 0x2e
 80032a8:	d10c      	bne.n	80032c4 <_svfiprintf_r+0x130>
 80032aa:	7863      	ldrb	r3, [r4, #1]
 80032ac:	2b2a      	cmp	r3, #42	; 0x2a
 80032ae:	d134      	bne.n	800331a <_svfiprintf_r+0x186>
 80032b0:	9b03      	ldr	r3, [sp, #12]
 80032b2:	1d1a      	adds	r2, r3, #4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	9203      	str	r2, [sp, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bfb8      	it	lt
 80032bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032c0:	3402      	adds	r4, #2
 80032c2:	9305      	str	r3, [sp, #20]
 80032c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800338c <_svfiprintf_r+0x1f8>
 80032c8:	7821      	ldrb	r1, [r4, #0]
 80032ca:	2203      	movs	r2, #3
 80032cc:	4650      	mov	r0, sl
 80032ce:	f7fc ff87 	bl	80001e0 <memchr>
 80032d2:	b138      	cbz	r0, 80032e4 <_svfiprintf_r+0x150>
 80032d4:	9b04      	ldr	r3, [sp, #16]
 80032d6:	eba0 000a 	sub.w	r0, r0, sl
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	4082      	lsls	r2, r0
 80032de:	4313      	orrs	r3, r2
 80032e0:	3401      	adds	r4, #1
 80032e2:	9304      	str	r3, [sp, #16]
 80032e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <_svfiprintf_r+0x1ec>)
 80032ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032ee:	2206      	movs	r2, #6
 80032f0:	f7fc ff76 	bl	80001e0 <memchr>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d038      	beq.n	800336a <_svfiprintf_r+0x1d6>
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <_svfiprintf_r+0x1f0>)
 80032fa:	bb1b      	cbnz	r3, 8003344 <_svfiprintf_r+0x1b0>
 80032fc:	9b03      	ldr	r3, [sp, #12]
 80032fe:	3307      	adds	r3, #7
 8003300:	f023 0307 	bic.w	r3, r3, #7
 8003304:	3308      	adds	r3, #8
 8003306:	9303      	str	r3, [sp, #12]
 8003308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800330a:	4433      	add	r3, r6
 800330c:	9309      	str	r3, [sp, #36]	; 0x24
 800330e:	e768      	b.n	80031e2 <_svfiprintf_r+0x4e>
 8003310:	fb0c 3202 	mla	r2, ip, r2, r3
 8003314:	460c      	mov	r4, r1
 8003316:	2001      	movs	r0, #1
 8003318:	e7a6      	b.n	8003268 <_svfiprintf_r+0xd4>
 800331a:	2300      	movs	r3, #0
 800331c:	3401      	adds	r4, #1
 800331e:	9305      	str	r3, [sp, #20]
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 0c0a 	mov.w	ip, #10
 8003326:	4620      	mov	r0, r4
 8003328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800332c:	3a30      	subs	r2, #48	; 0x30
 800332e:	2a09      	cmp	r2, #9
 8003330:	d903      	bls.n	800333a <_svfiprintf_r+0x1a6>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0c6      	beq.n	80032c4 <_svfiprintf_r+0x130>
 8003336:	9105      	str	r1, [sp, #20]
 8003338:	e7c4      	b.n	80032c4 <_svfiprintf_r+0x130>
 800333a:	fb0c 2101 	mla	r1, ip, r1, r2
 800333e:	4604      	mov	r4, r0
 8003340:	2301      	movs	r3, #1
 8003342:	e7f0      	b.n	8003326 <_svfiprintf_r+0x192>
 8003344:	ab03      	add	r3, sp, #12
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	462a      	mov	r2, r5
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <_svfiprintf_r+0x1f4>)
 800334c:	a904      	add	r1, sp, #16
 800334e:	4638      	mov	r0, r7
 8003350:	f3af 8000 	nop.w
 8003354:	1c42      	adds	r2, r0, #1
 8003356:	4606      	mov	r6, r0
 8003358:	d1d6      	bne.n	8003308 <_svfiprintf_r+0x174>
 800335a:	89ab      	ldrh	r3, [r5, #12]
 800335c:	065b      	lsls	r3, r3, #25
 800335e:	f53f af2d 	bmi.w	80031bc <_svfiprintf_r+0x28>
 8003362:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003364:	b01d      	add	sp, #116	; 0x74
 8003366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336a:	ab03      	add	r3, sp, #12
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	462a      	mov	r2, r5
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <_svfiprintf_r+0x1f4>)
 8003372:	a904      	add	r1, sp, #16
 8003374:	4638      	mov	r0, r7
 8003376:	f000 f879 	bl	800346c <_printf_i>
 800337a:	e7eb      	b.n	8003354 <_svfiprintf_r+0x1c0>
 800337c:	080037d4 	.word	0x080037d4
 8003380:	080037de 	.word	0x080037de
 8003384:	00000000 	.word	0x00000000
 8003388:	080030e1 	.word	0x080030e1
 800338c:	080037da 	.word	0x080037da

08003390 <_printf_common>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	4616      	mov	r6, r2
 8003396:	4699      	mov	r9, r3
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bfb8      	it	lt
 80033a4:	4613      	movlt	r3, r2
 80033a6:	6033      	str	r3, [r6, #0]
 80033a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ac:	4607      	mov	r7, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	b10a      	cbz	r2, 80033b6 <_printf_common+0x26>
 80033b2:	3301      	adds	r3, #1
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	0699      	lsls	r1, r3, #26
 80033ba:	bf42      	ittt	mi
 80033bc:	6833      	ldrmi	r3, [r6, #0]
 80033be:	3302      	addmi	r3, #2
 80033c0:	6033      	strmi	r3, [r6, #0]
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	f015 0506 	ands.w	r5, r5, #6
 80033c8:	d106      	bne.n	80033d8 <_printf_common+0x48>
 80033ca:	f104 0a19 	add.w	sl, r4, #25
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	6832      	ldr	r2, [r6, #0]
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	dc26      	bgt.n	8003426 <_printf_common+0x96>
 80033d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033dc:	1e13      	subs	r3, r2, #0
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	bf18      	it	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	0692      	lsls	r2, r2, #26
 80033e6:	d42b      	bmi.n	8003440 <_printf_common+0xb0>
 80033e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033ec:	4649      	mov	r1, r9
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	3001      	adds	r0, #1
 80033f4:	d01e      	beq.n	8003434 <_printf_common+0xa4>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	6922      	ldr	r2, [r4, #16]
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf02      	ittt	eq
 8003402:	68e5      	ldreq	r5, [r4, #12]
 8003404:	6833      	ldreq	r3, [r6, #0]
 8003406:	1aed      	subeq	r5, r5, r3
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	bf0c      	ite	eq
 800340c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003410:	2500      	movne	r5, #0
 8003412:	4293      	cmp	r3, r2
 8003414:	bfc4      	itt	gt
 8003416:	1a9b      	subgt	r3, r3, r2
 8003418:	18ed      	addgt	r5, r5, r3
 800341a:	2600      	movs	r6, #0
 800341c:	341a      	adds	r4, #26
 800341e:	42b5      	cmp	r5, r6
 8003420:	d11a      	bne.n	8003458 <_printf_common+0xc8>
 8003422:	2000      	movs	r0, #0
 8003424:	e008      	b.n	8003438 <_printf_common+0xa8>
 8003426:	2301      	movs	r3, #1
 8003428:	4652      	mov	r2, sl
 800342a:	4649      	mov	r1, r9
 800342c:	4638      	mov	r0, r7
 800342e:	47c0      	blx	r8
 8003430:	3001      	adds	r0, #1
 8003432:	d103      	bne.n	800343c <_printf_common+0xac>
 8003434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800343c:	3501      	adds	r5, #1
 800343e:	e7c6      	b.n	80033ce <_printf_common+0x3e>
 8003440:	18e1      	adds	r1, r4, r3
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	2030      	movs	r0, #48	; 0x30
 8003446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800344a:	4422      	add	r2, r4
 800344c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003454:	3302      	adds	r3, #2
 8003456:	e7c7      	b.n	80033e8 <_printf_common+0x58>
 8003458:	2301      	movs	r3, #1
 800345a:	4622      	mov	r2, r4
 800345c:	4649      	mov	r1, r9
 800345e:	4638      	mov	r0, r7
 8003460:	47c0      	blx	r8
 8003462:	3001      	adds	r0, #1
 8003464:	d0e6      	beq.n	8003434 <_printf_common+0xa4>
 8003466:	3601      	adds	r6, #1
 8003468:	e7d9      	b.n	800341e <_printf_common+0x8e>
	...

0800346c <_printf_i>:
 800346c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	7e0f      	ldrb	r7, [r1, #24]
 8003472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003474:	2f78      	cmp	r7, #120	; 0x78
 8003476:	4691      	mov	r9, r2
 8003478:	4680      	mov	r8, r0
 800347a:	460c      	mov	r4, r1
 800347c:	469a      	mov	sl, r3
 800347e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003482:	d807      	bhi.n	8003494 <_printf_i+0x28>
 8003484:	2f62      	cmp	r7, #98	; 0x62
 8003486:	d80a      	bhi.n	800349e <_printf_i+0x32>
 8003488:	2f00      	cmp	r7, #0
 800348a:	f000 80d4 	beq.w	8003636 <_printf_i+0x1ca>
 800348e:	2f58      	cmp	r7, #88	; 0x58
 8003490:	f000 80c0 	beq.w	8003614 <_printf_i+0x1a8>
 8003494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800349c:	e03a      	b.n	8003514 <_printf_i+0xa8>
 800349e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034a2:	2b15      	cmp	r3, #21
 80034a4:	d8f6      	bhi.n	8003494 <_printf_i+0x28>
 80034a6:	a101      	add	r1, pc, #4	; (adr r1, 80034ac <_printf_i+0x40>)
 80034a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034ac:	08003505 	.word	0x08003505
 80034b0:	08003519 	.word	0x08003519
 80034b4:	08003495 	.word	0x08003495
 80034b8:	08003495 	.word	0x08003495
 80034bc:	08003495 	.word	0x08003495
 80034c0:	08003495 	.word	0x08003495
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003495 	.word	0x08003495
 80034cc:	08003495 	.word	0x08003495
 80034d0:	08003495 	.word	0x08003495
 80034d4:	08003495 	.word	0x08003495
 80034d8:	0800361d 	.word	0x0800361d
 80034dc:	08003545 	.word	0x08003545
 80034e0:	080035d7 	.word	0x080035d7
 80034e4:	08003495 	.word	0x08003495
 80034e8:	08003495 	.word	0x08003495
 80034ec:	0800363f 	.word	0x0800363f
 80034f0:	08003495 	.word	0x08003495
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003495 	.word	0x08003495
 80034fc:	08003495 	.word	0x08003495
 8003500:	080035df 	.word	0x080035df
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	602a      	str	r2, [r5, #0]
 800350c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003514:	2301      	movs	r3, #1
 8003516:	e09f      	b.n	8003658 <_printf_i+0x1ec>
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	0607      	lsls	r7, r0, #24
 800351e:	f103 0104 	add.w	r1, r3, #4
 8003522:	6029      	str	r1, [r5, #0]
 8003524:	d501      	bpl.n	800352a <_printf_i+0xbe>
 8003526:	681e      	ldr	r6, [r3, #0]
 8003528:	e003      	b.n	8003532 <_printf_i+0xc6>
 800352a:	0646      	lsls	r6, r0, #25
 800352c:	d5fb      	bpl.n	8003526 <_printf_i+0xba>
 800352e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003532:	2e00      	cmp	r6, #0
 8003534:	da03      	bge.n	800353e <_printf_i+0xd2>
 8003536:	232d      	movs	r3, #45	; 0x2d
 8003538:	4276      	negs	r6, r6
 800353a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353e:	485a      	ldr	r0, [pc, #360]	; (80036a8 <_printf_i+0x23c>)
 8003540:	230a      	movs	r3, #10
 8003542:	e012      	b.n	800356a <_printf_i+0xfe>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1d19      	adds	r1, r3, #4
 800354a:	6029      	str	r1, [r5, #0]
 800354c:	0605      	lsls	r5, r0, #24
 800354e:	d501      	bpl.n	8003554 <_printf_i+0xe8>
 8003550:	681e      	ldr	r6, [r3, #0]
 8003552:	e002      	b.n	800355a <_printf_i+0xee>
 8003554:	0641      	lsls	r1, r0, #25
 8003556:	d5fb      	bpl.n	8003550 <_printf_i+0xe4>
 8003558:	881e      	ldrh	r6, [r3, #0]
 800355a:	4853      	ldr	r0, [pc, #332]	; (80036a8 <_printf_i+0x23c>)
 800355c:	2f6f      	cmp	r7, #111	; 0x6f
 800355e:	bf0c      	ite	eq
 8003560:	2308      	moveq	r3, #8
 8003562:	230a      	movne	r3, #10
 8003564:	2100      	movs	r1, #0
 8003566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800356a:	6865      	ldr	r5, [r4, #4]
 800356c:	60a5      	str	r5, [r4, #8]
 800356e:	2d00      	cmp	r5, #0
 8003570:	bfa2      	ittt	ge
 8003572:	6821      	ldrge	r1, [r4, #0]
 8003574:	f021 0104 	bicge.w	r1, r1, #4
 8003578:	6021      	strge	r1, [r4, #0]
 800357a:	b90e      	cbnz	r6, 8003580 <_printf_i+0x114>
 800357c:	2d00      	cmp	r5, #0
 800357e:	d04b      	beq.n	8003618 <_printf_i+0x1ac>
 8003580:	4615      	mov	r5, r2
 8003582:	fbb6 f1f3 	udiv	r1, r6, r3
 8003586:	fb03 6711 	mls	r7, r3, r1, r6
 800358a:	5dc7      	ldrb	r7, [r0, r7]
 800358c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003590:	4637      	mov	r7, r6
 8003592:	42bb      	cmp	r3, r7
 8003594:	460e      	mov	r6, r1
 8003596:	d9f4      	bls.n	8003582 <_printf_i+0x116>
 8003598:	2b08      	cmp	r3, #8
 800359a:	d10b      	bne.n	80035b4 <_printf_i+0x148>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	07de      	lsls	r6, r3, #31
 80035a0:	d508      	bpl.n	80035b4 <_printf_i+0x148>
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	6861      	ldr	r1, [r4, #4]
 80035a6:	4299      	cmp	r1, r3
 80035a8:	bfde      	ittt	le
 80035aa:	2330      	movle	r3, #48	; 0x30
 80035ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80035b4:	1b52      	subs	r2, r2, r5
 80035b6:	6122      	str	r2, [r4, #16]
 80035b8:	f8cd a000 	str.w	sl, [sp]
 80035bc:	464b      	mov	r3, r9
 80035be:	aa03      	add	r2, sp, #12
 80035c0:	4621      	mov	r1, r4
 80035c2:	4640      	mov	r0, r8
 80035c4:	f7ff fee4 	bl	8003390 <_printf_common>
 80035c8:	3001      	adds	r0, #1
 80035ca:	d14a      	bne.n	8003662 <_printf_i+0x1f6>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d0:	b004      	add	sp, #16
 80035d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	f043 0320 	orr.w	r3, r3, #32
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	4833      	ldr	r0, [pc, #204]	; (80036ac <_printf_i+0x240>)
 80035e0:	2778      	movs	r7, #120	; 0x78
 80035e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	6829      	ldr	r1, [r5, #0]
 80035ea:	061f      	lsls	r7, r3, #24
 80035ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80035f0:	d402      	bmi.n	80035f8 <_printf_i+0x18c>
 80035f2:	065f      	lsls	r7, r3, #25
 80035f4:	bf48      	it	mi
 80035f6:	b2b6      	uxthmi	r6, r6
 80035f8:	07df      	lsls	r7, r3, #31
 80035fa:	bf48      	it	mi
 80035fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003600:	6029      	str	r1, [r5, #0]
 8003602:	bf48      	it	mi
 8003604:	6023      	strmi	r3, [r4, #0]
 8003606:	b91e      	cbnz	r6, 8003610 <_printf_i+0x1a4>
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	f023 0320 	bic.w	r3, r3, #32
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	2310      	movs	r3, #16
 8003612:	e7a7      	b.n	8003564 <_printf_i+0xf8>
 8003614:	4824      	ldr	r0, [pc, #144]	; (80036a8 <_printf_i+0x23c>)
 8003616:	e7e4      	b.n	80035e2 <_printf_i+0x176>
 8003618:	4615      	mov	r5, r2
 800361a:	e7bd      	b.n	8003598 <_printf_i+0x12c>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	6826      	ldr	r6, [r4, #0]
 8003620:	6961      	ldr	r1, [r4, #20]
 8003622:	1d18      	adds	r0, r3, #4
 8003624:	6028      	str	r0, [r5, #0]
 8003626:	0635      	lsls	r5, r6, #24
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	d501      	bpl.n	8003630 <_printf_i+0x1c4>
 800362c:	6019      	str	r1, [r3, #0]
 800362e:	e002      	b.n	8003636 <_printf_i+0x1ca>
 8003630:	0670      	lsls	r0, r6, #25
 8003632:	d5fb      	bpl.n	800362c <_printf_i+0x1c0>
 8003634:	8019      	strh	r1, [r3, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	6123      	str	r3, [r4, #16]
 800363a:	4615      	mov	r5, r2
 800363c:	e7bc      	b.n	80035b8 <_printf_i+0x14c>
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	602a      	str	r2, [r5, #0]
 8003644:	681d      	ldr	r5, [r3, #0]
 8003646:	6862      	ldr	r2, [r4, #4]
 8003648:	2100      	movs	r1, #0
 800364a:	4628      	mov	r0, r5
 800364c:	f7fc fdc8 	bl	80001e0 <memchr>
 8003650:	b108      	cbz	r0, 8003656 <_printf_i+0x1ea>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	6060      	str	r0, [r4, #4]
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	2300      	movs	r3, #0
 800365c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003660:	e7aa      	b.n	80035b8 <_printf_i+0x14c>
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	462a      	mov	r2, r5
 8003666:	4649      	mov	r1, r9
 8003668:	4640      	mov	r0, r8
 800366a:	47d0      	blx	sl
 800366c:	3001      	adds	r0, #1
 800366e:	d0ad      	beq.n	80035cc <_printf_i+0x160>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	079b      	lsls	r3, r3, #30
 8003674:	d413      	bmi.n	800369e <_printf_i+0x232>
 8003676:	68e0      	ldr	r0, [r4, #12]
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	4298      	cmp	r0, r3
 800367c:	bfb8      	it	lt
 800367e:	4618      	movlt	r0, r3
 8003680:	e7a6      	b.n	80035d0 <_printf_i+0x164>
 8003682:	2301      	movs	r3, #1
 8003684:	4632      	mov	r2, r6
 8003686:	4649      	mov	r1, r9
 8003688:	4640      	mov	r0, r8
 800368a:	47d0      	blx	sl
 800368c:	3001      	adds	r0, #1
 800368e:	d09d      	beq.n	80035cc <_printf_i+0x160>
 8003690:	3501      	adds	r5, #1
 8003692:	68e3      	ldr	r3, [r4, #12]
 8003694:	9903      	ldr	r1, [sp, #12]
 8003696:	1a5b      	subs	r3, r3, r1
 8003698:	42ab      	cmp	r3, r5
 800369a:	dcf2      	bgt.n	8003682 <_printf_i+0x216>
 800369c:	e7eb      	b.n	8003676 <_printf_i+0x20a>
 800369e:	2500      	movs	r5, #0
 80036a0:	f104 0619 	add.w	r6, r4, #25
 80036a4:	e7f5      	b.n	8003692 <_printf_i+0x226>
 80036a6:	bf00      	nop
 80036a8:	080037e5 	.word	0x080037e5
 80036ac:	080037f6 	.word	0x080037f6

080036b0 <memmove>:
 80036b0:	4288      	cmp	r0, r1
 80036b2:	b510      	push	{r4, lr}
 80036b4:	eb01 0402 	add.w	r4, r1, r2
 80036b8:	d902      	bls.n	80036c0 <memmove+0x10>
 80036ba:	4284      	cmp	r4, r0
 80036bc:	4623      	mov	r3, r4
 80036be:	d807      	bhi.n	80036d0 <memmove+0x20>
 80036c0:	1e43      	subs	r3, r0, #1
 80036c2:	42a1      	cmp	r1, r4
 80036c4:	d008      	beq.n	80036d8 <memmove+0x28>
 80036c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036ce:	e7f8      	b.n	80036c2 <memmove+0x12>
 80036d0:	4402      	add	r2, r0
 80036d2:	4601      	mov	r1, r0
 80036d4:	428a      	cmp	r2, r1
 80036d6:	d100      	bne.n	80036da <memmove+0x2a>
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036e2:	e7f7      	b.n	80036d4 <memmove+0x24>

080036e4 <_sbrk_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4d06      	ldr	r5, [pc, #24]	; (8003700 <_sbrk_r+0x1c>)
 80036e8:	2300      	movs	r3, #0
 80036ea:	4604      	mov	r4, r0
 80036ec:	4608      	mov	r0, r1
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	f7fd f9f8 	bl	8000ae4 <_sbrk>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_sbrk_r+0x1a>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_sbrk_r+0x1a>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20000260 	.word	0x20000260

08003704 <memcpy>:
 8003704:	440a      	add	r2, r1
 8003706:	4291      	cmp	r1, r2
 8003708:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800370c:	d100      	bne.n	8003710 <memcpy+0xc>
 800370e:	4770      	bx	lr
 8003710:	b510      	push	{r4, lr}
 8003712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800371a:	4291      	cmp	r1, r2
 800371c:	d1f9      	bne.n	8003712 <memcpy+0xe>
 800371e:	bd10      	pop	{r4, pc}

08003720 <_realloc_r>:
 8003720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003724:	4680      	mov	r8, r0
 8003726:	4614      	mov	r4, r2
 8003728:	460e      	mov	r6, r1
 800372a:	b921      	cbnz	r1, 8003736 <_realloc_r+0x16>
 800372c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003730:	4611      	mov	r1, r2
 8003732:	f7ff bc49 	b.w	8002fc8 <_malloc_r>
 8003736:	b92a      	cbnz	r2, 8003744 <_realloc_r+0x24>
 8003738:	f7ff fbda 	bl	8002ef0 <_free_r>
 800373c:	4625      	mov	r5, r4
 800373e:	4628      	mov	r0, r5
 8003740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003744:	f000 f81b 	bl	800377e <_malloc_usable_size_r>
 8003748:	4284      	cmp	r4, r0
 800374a:	4607      	mov	r7, r0
 800374c:	d802      	bhi.n	8003754 <_realloc_r+0x34>
 800374e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003752:	d812      	bhi.n	800377a <_realloc_r+0x5a>
 8003754:	4621      	mov	r1, r4
 8003756:	4640      	mov	r0, r8
 8003758:	f7ff fc36 	bl	8002fc8 <_malloc_r>
 800375c:	4605      	mov	r5, r0
 800375e:	2800      	cmp	r0, #0
 8003760:	d0ed      	beq.n	800373e <_realloc_r+0x1e>
 8003762:	42bc      	cmp	r4, r7
 8003764:	4622      	mov	r2, r4
 8003766:	4631      	mov	r1, r6
 8003768:	bf28      	it	cs
 800376a:	463a      	movcs	r2, r7
 800376c:	f7ff ffca 	bl	8003704 <memcpy>
 8003770:	4631      	mov	r1, r6
 8003772:	4640      	mov	r0, r8
 8003774:	f7ff fbbc 	bl	8002ef0 <_free_r>
 8003778:	e7e1      	b.n	800373e <_realloc_r+0x1e>
 800377a:	4635      	mov	r5, r6
 800377c:	e7df      	b.n	800373e <_realloc_r+0x1e>

0800377e <_malloc_usable_size_r>:
 800377e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003782:	1f18      	subs	r0, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	bfbc      	itt	lt
 8003788:	580b      	ldrlt	r3, [r1, r0]
 800378a:	18c0      	addlt	r0, r0, r3
 800378c:	4770      	bx	lr
	...

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
